name: 04) Enforce Passwordless Auth (Managers)

on:
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: passwordless-${{ github.ref }}
  cancel-in-progress: true

jobs:
  passwordless:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 45
    env:
      NS: wazuh
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      RAW_KCFG: ${{ secrets.KUBECONFIG }}
      KCFG_B64: ${{ secrets.KUBECONFIG_B64 }}
      KCFG_B64_ALT: ${{ secrets.KUBE_CONFIG_B64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Mask secrets (if present)
        shell: bash
        run: |
          for v in RAW_KCFG KCFG_B64 KCFG_B64_ALT; do
            val="${!v:-}"; [ -n "$val" ] && echo "::add-mask::$val"
          done

      - name: Ensure CLIs (kubectl + yq) no sudo
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          if ! command -v kubectl >/dev/null 2>&1; then
            curl -fsSL -o "$HOME/.local/bin/kubectl" "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x "$HOME/.local/bin/kubectl"
          fi
          if ! command -v yq >/dev/null 2>&1; then
            curl -fsSL -o "$HOME/.local/bin/yq" "https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64"
            chmod +x "$HOME/.local/bin/yq"
          fi
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Write kubeconfig from secrets
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${RAW_KCFG:-}" ]; then
            printf '%s' "$RAW_KCFG" > "$KUBECONFIG"
          elif [ -n "${KCFG_B64:-}" ]; then
            printf '%s' "$KCFG_B64" | base64 -d > "$KUBECONFIG"
          elif [ -n "${KCFG_B64_ALT:-}" ]; then
            printf '%s' "$KCFG_B64_ALT" | base64 -d > "$KUBECONFIG"
          else
            echo "::error::No kubeconfig secret found. Provide one of: KUBECONFIG (raw), KUBECONFIG_B64 (b64), or KUBE_CONFIG_B64 (b64)."
            exit 1
          fi
          chmod 600 "$KUBECONFIG"

      - name: Sanity check cluster connectivity
        shell: bash
        run: |
          set -euo pipefail
          kubectl version --client
          kubectl get nodes -o wide
          kubectl -n "$NS" get pods -l app=wazuh-manager -o wide || true

      # Optional CM patch (best-effort; does NOT fail the job)
      - name: Patch manager ossec.conf in ConfigMaps to passwordless (1515)
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          CM_NAMES="$(
            { kubectl -n "$NS" get sts -l app=wazuh-manager -o jsonpath='{range .items[*].spec.template.spec.volumes[*]}{.configMap.name}{"\n"}{end}';
              kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{range .items[*].spec.volumes[*]}{.configMap.name}{"\n"}{end}';
            } 2>/dev/null | sort -u | sed '/^$/d' || true
          )"
          if [ -z "$CM_NAMES" ]; then
            echo "::notice::No manager ConfigMaps with ossec.conf found (skipping CM patch)"
          else
            for CM in $CM_NAMES; do
              echo ">> Processing ConfigMap: $CM"
              kubectl -n "$NS" get cm "$CM" -o yaml > "/tmp/${CM}.yaml" || continue
              OSSEC="$(yq -r '.data."ossec.conf"' "/tmp/${CM}.yaml" || true)"
              if [ -z "$OSSEC" ] || [ "$OSSEC" = "null" ]; then
                echo "::notice::$CM has no data.ossec.conf; skipping"
                continue
              fi
              yq -i '
                .data."ossec.conf" =
                  (.data."ossec.conf"
                    | sub("(?s)(<auth>)(.*?)(</auth>)";
                          capture("(?s)(?<open><auth>)(?<body>.*?)(?<close></auth>)") as $m
                          | ($m.body
                              | sub("<use_password>[^<]+</use_password>"; "<use_password>no</use_password>")
                              | sub("<port>[^<]+</port>"; "<port>1515</port>")
                              | sub("(?s)[[:space:]]*<password>[^<]*</password>[[:space:]]*"; "")
                            ) as $nb
                          | "\($m.open)\($nb)\($m.close)"
                    )
                  )
              ' "/tmp/${CM}.yaml"
              kubectl -n "$NS" apply -f "/tmp/${CM}.yaml"
            done
          fi

      - name: Force passwordless in running pods & purge authd.pass (auto-detect container)
        shell: bash
        run: |
          set -euo pipefail
          PODS="$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')"
          if [ -z "$PODS" ]; then
            echo "::error::No wazuh-manager pods found"; exit 1
          fi

          for P in $PODS; do
            echo "---- Processing pod: $P ----"
            CONTAINERS="$(kubectl -n "$NS" get pod "$P" -o jsonpath='{.spec.containers[*].name}')"
            TARGET=""
            for C in $CONTAINERS; do
              if kubectl -n "$NS" exec "$P" -c "$C" -- sh -lc 'test -x /var/ossec/bin/wazuh-control'; then
                TARGET="$C"; break
              fi
            done
            if [ -z "$TARGET" ]; then
              echo "::error::$P has no container with /var/ossec/bin/wazuh-control"; exit 1
            fi
            echo "Using container: $TARGET"

            # Patch file, remove authd.pass, restart manager inside pod
            kubectl -n "$NS" exec "$P" -c "$TARGET" -- sh -lc '
              set -e
              f=/var/ossec/etc/ossec.conf
              cp "$f" "${f}.bak.$(date +%s)" || true
              # normalize <auth> block
              sed -i -E "/<auth>/,/<\\/auth>/ s|<use_password>[^<]+</use_password>|<use_password>no</use_password>|" "$f"
              sed -i -E "/<auth>/,/<\\/auth>/ s|<port>[0-9]+</port>|<port>1515</port>|" "$f"
              # remove <password>...</password> if present
              awk '"'"'BEGIN{inauth=0} /<auth>/{inauth=1} inauth && /<password>.*<\/password>/{next} /<\/auth>/{inauth=0} {print}'"'"' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              rm -f /var/ossec/etc/authd.pass || true
              echo "Restarting Wazuh manager (in-pod)"
              /var/ossec/bin/wazuh-control restart || /var/ossec/bin/wazuh-control start
              sleep 4
              echo "----- <auth> after patch (pod $(hostname)) -----"
              sed -n "/<auth>/,/<\\/auth>/p" "$f"
            '
          done

      - name: Verify passwordless & authd reachability (fail if not)
        shell: bash
        run: |
          set -euo pipefail
          FAIL=0
          PODS="$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' || true)"
          if [ -z "$PODS" ]; then
            echo "::error::No wazuh-manager pods found"; exit 1
          fi
          for P in $PODS; do
            CONTAINERS="$(kubectl -n "$NS" get pod "$P" -o jsonpath='{.spec.containers[*].name}')"
            TARGET=""
            for C in $CONTAINERS; do
              if kubectl -n "$NS" exec "$P" -c "$C" -- sh -lc 'test -x /var/ossec/bin/wazuh-control'; then TARGET="$C"; break; fi
            done
            [ -z "$TARGET" ] && { echo "::error::$P has no wazuh-control"; FAIL=1; continue; }

            USEPW="$(kubectl -n "$NS" exec "$P" -c "$TARGET" -- sh -lc 'grep -o "<use_password>[^<]*</use_password>" /var/ossec/etc/ossec.conf || true')"
            PORTOK="$(kubectl -n "$NS" exec "$P" -c "$TARGET" -- sh -lc 'grep -q "<port>1515</port>" /var/ossec/etc/ossec.conf && echo ok || echo bad')"
            PASSFILE="$(kubectl -n "$NS" exec "$P" -c "$TARGET" -- sh -lc '[ -f /var/ossec/etc/authd.pass ] && echo present || echo absent')"
            echo "$P => use_password: ${USEPW:-<none>} | port1515: $PORTOK | authd.pass: $PASSFILE"

            if echo "${USEPW}" | grep -q '<use_password>yes</use_password>'; then
              echo "::error file=/var/ossec/etc/ossec.conf,title=Password still enabled::$P has <use_password>yes</use_password>"; FAIL=1; fi
            [ "$PORTOK" != "ok" ] && { echo "::error file=/var/ossec/etc/ossec.conf,title=Wrong authd port::$P lacks <port>1515</port>"; FAIL=1; }
            [ "$PASSFILE" = "present" ] && { echo "::error file=/var/ossec/etc/authd.pass,title=Password file present::$P still has authd.pass"; FAIL=1; }
          done

          # DNS/port check against service(s)
          SVC=wazuh
          ALT=wazuh-authd-master
          HAVE_SVC="$(kubectl -n "$NS" get svc "$SVC" -o name 2>/dev/null || true)"
          HAVE_ALT="$(kubectl -n "$NS" get svc "$ALT" -o name 2>/dev/null || true)"
          TARGET_DNS=""
          if [ -n "$HAVE_SVC" ]; then TARGET_DNS="$SVC.$NS.svc.cluster.local"; fi
          if [ -z "$TARGET_DNS" ] && [ -n "$HAVE_ALT" ]; then TARGET_DNS="$ALT.$NS.svc.cluster.local"; fi

          if [ -n "$TARGET_DNS" ]; then
            echo "Probing DNS/1515 on $TARGET_DNS"
            kubectl -n "$NS" delete pod probe-authd --ignore-not-found=true
            set +e
            kubectl -n "$NS" run probe-authd --image=busybox:1.36 --restart=Never -- sh -lc \
              'set -e; nslookup '"$TARGET_DNS"'; for i in $(seq 1 12); do nc -vz -w 2 '"$TARGET_DNS"' 1515 && exit 0; echo retry; sleep 2; done; exit 1'
            PROBE=$?
            kubectl -n "$NS" logs pod/probe-authd || true
            kubectl -n "$NS" delete pod probe-authd --ignore-not-found=true
            set -e
            [ $PROBE -ne 0 ] && { echo "::error title=Authd 1515 not reachable::Could not reach $TARGET_DNS:1515 from cluster"; FAIL=1; }
          else
            echo "::notice::No wazuh service found to probe (neither 'wazuh' nor 'wazuh-authd-master')."
          fi

          if [ "$FAIL" -ne 0 ]; then
            echo "::error::Managers are NOT fully passwordless/reachable. See errors above."; exit 1
          fi
          echo "Managers verified passwordless and authd reachable on 1515."
