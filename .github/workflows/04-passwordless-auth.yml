      - name: Deploy Agent DaemonSet (passwordless; group-aware)
        shell: bash
        env:
          GROUPS: ${{ env.GROUPS }}                 # comes from workflow input
          KUBECONFIG: ${{ env.KUBECONFIG_PATH }}
        run: |
          set -euo pipefail
          kubectl -n "$NS" delete ds wazuh-agent --ignore-not-found=true
          cat <<EOF | kubectl -n "$NS" apply -f -
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-agent
            labels: { app: wazuh-agent }
          spec:
            selector: { matchLabels: { app: wazuh-agent } }
            updateStrategy: { type: RollingUpdate }
            template:
              metadata: { labels: { app: wazuh-agent } }
              spec:
                hostNetwork: true
                hostPID: true
                dnsPolicy: ClusterFirstWithHostNet
                terminationGracePeriodSeconds: 30
                tolerations:
                  - { key: node-role.kubernetes.io/master, operator: Exists, effect: NoSchedule }
                  - { key: node-role.kubernetes.io/control-plane, operator: Exists, effect: NoSchedule }
                containers:
                  - name: wazuh-agent
                    image: ghcr.io/saurab123456/wazuh-agent:4.12.0
                    imagePullPolicy: IfNotPresent
                    securityContext: { privileged: true, runAsUser: 0 }
                    env:
                      - name: NODE_NAME
                        valueFrom: { fieldRef: { fieldPath: spec.nodeName } }
                      - name: AUTHD_PORT
                        value: "1515"
                      - name: MANAGER_DNS
                        value: "wazuh.wazuh.svc.cluster.local"
                      - name: GROUPS
                        value: "${GROUPS}"             # <-- expanded NOW by the runner
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -e
                        AGENT_NAME="$${NODE_NAME}"
                        GROUP_VAL="$${GROUPS:-default}"

                        echo "Agent name: $${AGENT_NAME}"
                        echo "Target manager: $${MANAGER_DNS}:$${AUTHD_PORT}"
                        echo "Requested group: $${GROUP_VAL}"

                        mkdir -p /var/ossec/var/run /var/ossec/queue/sockets /var/ossec/queue/db
                        cp /config/ossec.conf /var/ossec/etc/ossec.conf 2>/dev/null || true
                        rm -f /var/ossec/var/run/*.pid /var/ossec/var/*.lock 2>/dev/null || true

                        enroll() {
                          if [ -z "$${GROUP_VAL}" ] || [ "$${GROUP_VAL}" = "default" ]; then
                            echo "Enrolling WITHOUT -G (default group)"
                            /var/ossec/bin/agent-auth -m "$${MANAGER_DNS}" -p "$${AUTHD_PORT}" -A "$${AGENT_NAME}"
                          else
                            echo "Enrolling WITH -G $${GROUP_VAL}"
                            /var/ossec/bin/agent-auth -m "$${MANAGER_DNS}" -p "$${AUTHD_PORT}" -A "$${AGENT_NAME}" -G "$${GROUP_VAL}"
                          fi
                        }

                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          for i in $(seq 1 36); do
                            if enroll; then break; fi
                            echo "Enroll attempt $i failed; retrying in 5s…"
                            sleep 5
                          done
                        fi

                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          echo "ERROR: Enrollment failed; exiting."
                          exit 1
                        fi

                        echo "Starting Wazuh agent…"
                        /var/ossec/bin/wazuh-control start
                        sleep 5
                        /var/ossec/bin/wazuh-control status
                        tail -f /var/ossec/logs/ossec.log
                    readinessProbe:
                      exec: { command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"'] }
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      failureThreshold: 6
                      timeoutSeconds: 5
                    livenessProbe:
                      exec: { command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"'] }
                      initialDelaySeconds: 60
                      periodSeconds: 30
                      failureThreshold: 3
                      timeoutSeconds: 5
                    lifecycle:
                      preStop:
                        exec: { command: ["/bin/sh","-c","/var/ossec/bin/wazuh-control stop || true"] }
                    resources:
                      requests: { cpu: "100m", memory: "256Mi" }
                    volumeMounts:
                      - { name: ossec-conf-cm,   mountPath: /config,                    readOnly: true }
                      - { name: varlogcontainers, mountPath: /host/var/log/containers,   readOnly: true }
                      - { name: varlogpods,       mountPath: /host/var/log/pods,         readOnly: true }
                      - { name: varlog,           mountPath: /host/var/log,              readOnly: true }
                volumes:
                  - { name: ossec-conf-cm,   configMap: { name: wazuh-agent-ossec } }
                  - { name: varlogcontainers, hostPath: { path: /var/log/containers, type: DirectoryOrCreate } }
                  - { name: varlogpods,       hostPath: { path: /var/log/pods,       type: DirectoryOrCreate } }
                  - { name: varlog,           hostPath: { path: /var/log,            type: Directory } }
          EOF

          # Show what value actually landed in the Pod spec:
          kubectl -n "$NS" get ds wazuh-agent -o jsonpath='{.spec.template.spec.containers[0].env[?(@.name=="GROUPS")].value}{"\n"}'
          kubectl -n "$NS" rollout status ds/wazuh-agent --timeout=600s || true
          kubectl -n "$NS" get pods -l app=wazuh-agent -o wide
