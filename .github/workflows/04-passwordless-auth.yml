name: 03) Enforce Passwordless Auth (Managers)

on:
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: passwordless-${{ github.ref }}
  cancel-in-progress: true

jobs:
  passwordless:
    # Run ONLY when manually dispatched
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 45
    env:
      NS: wazuh
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write kubeconfig from secret
        shell: bash
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        run: |
          set -e
          test -n "${KUBE_CONFIG_B64:-}" || { echo "::error::Secret KUBE_CONFIG_B64 missing"; exit 1; }
          echo "$KUBE_CONFIG_B64" | base64 -d > "$KUBECONFIG"

      - name: Patch manager ossec.conf in ConfigMaps to passwordless (1515)
        shell: bash
        run: |
          set -euo pipefail
          CM_NAMES="$(
            { kubectl -n "$NS" get sts -l app=wazuh-manager \
                -o jsonpath='{range .items[*].spec.template.spec.volumes[*]}{.configMap.name}{"\n"}{end}';
              kubectl -n "$NS" get pods -l app=wazuh-manager \
                -o jsonpath='{range .items[*].spec.volumes[*]}{.configMap.name}{"\n"}{end}';
            } 2>/dev/null | sort -u | sed '/^$/d' || true
          )"
          if [ -z "$CM_NAMES" ]; then
            echo "::warning::No manager ConfigMaps found"; exit 0
          fi
          for CM in $CM_NAMES; do
            echo ">> Processing ConfigMap: $CM"
            kubectl -n "$NS" get cm "$CM" -o yaml > "/tmp/${CM}.yaml"
            OSSEC="$(yq -r '.data."ossec.conf"' "/tmp/${CM}.yaml" || true)"
            if [ -z "$OSSEC" ] || [ "$OSSEC" = "null" ]; then
              echo "::warning::${CM} has no data.ossec.conf; skipping"
              continue
            fi
            yq -i '
              .data."ossec.conf" =
                (.data."ossec.conf"
                  | sub("(?s)(<auth>)(.*?)(</auth>)";
                        capture("(?s)(?<open><auth>)(?<body>.*?)(?<close></auth>)") as $m
                        | ($m.body
                            | sub("<use_password>[^<]+</use_password>"; "<use_password>no</use_password>")
                            | sub("<port>[^<]+</port>"; "<port>1515</port>")
                            | sub("(?s)[[:space:]]*<password>[^<]*</password>[[:space:]]*"; "")
                          ) as $nb
                        | "\($m.open)\($nb)\($m.close)"
                  )
                )
            ' "/tmp/${CM}.yaml"
            kubectl -n "$NS" apply -f "/tmp/${CM}.yaml"
          done

      - name: Force passwordless in running pods & purge authd.pass
        shell: bash
        run: |
          set -euo pipefail
          for P in $(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'); do
            echo "Patching $P ..."
            kubectl -n "$NS" exec "$P" -c wazuh-manager -- sh -lc '
              set -e
              f=/var/ossec/etc/ossec.conf
              cp "$f" "${f}.bak.$(date +%s)" || true
              sed -i -E "/<auth>/,/<\\/auth>/ s|<port>[0-9]+</port>|<port>1515</port>|" "$f"
              sed -i -E "/<auth>/,/<\\/auth>/ s|<use_password>[^<]+</use_password>|<use_password>no</use_password>|" "$f"
              awk '"'"'BEGIN{inauth=0} /<auth>/{inauth=1} inauth && /<password>.*<\/password>/{next} /<\/auth>/{inauth=0} {print}'"'"' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              rm -f /var/ossec/etc/authd.pass || true
              echo "----- <auth> after patch (pod $(hostname)) -----"
              sed -n "/<auth>/,/<\\/auth>/p" "$f"
            '
          done

      - name: Rollout restart managers
        shell: bash
        run: |
          set -e
          for s in wazuh-manager-master wazuh-manager-worker; do
            kubectl -n "$NS" get sts "$s" >/dev/null 2>&1 || continue
            kubectl -n "$NS" rollout restart sts/"$s"
            kubectl -n "$NS" rollout status  sts/"$s" --timeout=600s
          done

      - name: Ensure Services (master authd:1515, workers events:1514)
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NS" delete svc wazuh --ignore-not-found=true
          cat <<'EOF' | kubectl -n "$NS" apply -f -
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh-authd-master
            labels: { app: wazuh-manager, node-type: master }
          spec:
            type: ClusterIP
            selector: { app: wazuh-manager, node-type: master }
            ports:
              - { name: authd, port: 1515, targetPort: 1515, protocol: TCP }
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh-workers
            labels: { app: wazuh-manager, role: agents-events }
          spec:
            type: ClusterIP
            selector: { app: wazuh-manager, node-type: worker }
            ports:
              - { name: agents-events, port: 1514, targetPort: 1514, protocol: TCP }
          EOF
          kubectl -n "$NS" get svc -o wide
          kubectl -n "$NS" get endpoints -o wide

      - name: Verify passwordless (hard fail if misconfigured)
        shell: bash
        run: |
          set -euo pipefail
          FAIL=0
          PODS="$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' || true)"
          if [ -z "$PODS" ]; then
            echo "::error::No wazuh-manager pods found"
            exit 1
          fi
          for P in $PODS; do
            echo "Checking $P ..."
            RUNTIME_LINE="$(kubectl -n "$NS" exec "$P" -c wazuh-manager -- sh -lc 'grep -o \"<use_password>[^<]*</use_password>\" /var/ossec/etc/ossec.conf || true')"
            PORT_OK="$(kubectl -n "$NS" exec "$P" -c wazuh-manager -- sh -lc 'grep -q \"<port>1515</port>\" /var/ossec/etc/ossec.conf && echo ok || echo bad')"
            AUTHD_PASS_PRESENT="$(kubectl -n "$NS" exec "$P" -c wazuh-manager -- sh -lc '[ -f /var/ossec/etc/authd.pass ] && echo present || echo absent')"
            echo "  runtime use_password: ${RUNTIME_LINE:-<none>}"; echo "  runtime port 1515: $PORT_OK"; echo "  authd.pass: $AUTHD_PASS_PRESENT"
            if echo "${RUNTIME_LINE}" | grep -q '<use_password>yes</use_password>'; then
              echo "::error file=/var/ossec/etc/ossec.conf,title=Runtime shows password enabled::$P has <use_password>yes</use_password>"; FAIL=1; fi
            if [ "$PORT_OK" != "ok" ]; then
              echo "::error file=/var/ossec/etc/ossec.conf,title=Wrong authd port::$P does not have <port>1515</port>"; FAIL=1; fi
            if [ "$AUTHD_PASS_PRESENT" = "present" ]; then
              echo "::error file=/var/ossec/etc/authd.pass,title=Password file present::$P has /var/ossec/etc/authd.pass present (should be absent)"; FAIL=1; fi
          done
          if [ "$FAIL" -ne 0 ]; then
            echo "::error::One or more wazuh-manager pods are not passwordless. See errors above."
            exit 1
          fi
          echo "All wazuh-manager pods verified passwordless and on port 1515."
