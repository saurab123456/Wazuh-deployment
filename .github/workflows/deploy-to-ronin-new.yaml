name: Deploy Wazuh (Official Kubernetes Manifests)

on:
  workflow_dispatch:
    inputs:
      overlay:
        description: "Which official overlay to apply"
        required: true
        default: single-node
        type: choice
        options:
          - single-node
          - production-cluster
      wazuh_tag:
        description: "wazuh-kubernetes repo tag (e.g., v4.12.0)"
        required: true
        default: v4.12.0

jobs:
  deploy:
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 45

    env:
      NS: wazuh
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      WAZUH_K8S_TAG: ${{ inputs.wazuh_tag }}
      OVERLAY: ${{ inputs.overlay }}

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Verify runner + kubectl
        run: |
          echo "Host: $(hostname)"; date
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -sS https://dl.k8s.io/release/stable.txt)"
            curl -sSLo kubectl "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          fi
          kubectl version --client=true | head -n 1

      - name: Write kubeconfig from secret
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        run: |
          test -n "$KUBE_CONFIG_B64" || { echo "::error::Secret KUBE_CONFIG_B64 missing"; exit 1; }
          echo "$KUBE_CONFIG_B64" | base64 -d > "$KUBECONFIG"
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Ensure namespace
        run: |
          kubectl create namespace "$NS" --dry-run=client -o yaml | kubectl apply -f -

      # ---------------- SYSCTL: vm.max_map_count ----------------
      - name: Apply sysctl DaemonSet (vm.max_map_count=262144 on all nodes)
        run: |
          cat > /tmp/wazuh-sysctl-ds.yaml <<'EOF'
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-sysctl
            namespace: kube-system
            labels:
              app: wazuh-sysctl
          spec:
            selector:
              matchLabels:
                app: wazuh-sysctl
            template:
              metadata:
                labels:
                  app: wazuh-sysctl
              spec:
                hostPID: true
                tolerations:
                  - operator: "Exists"
                containers:
                  - name: sysctl
                    image: busybox:1.36
                    securityContext:
                      privileged: true
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -e
                        # Apply live value on host
                        echo 262144 > /host-proc/sys/vm/max_map_count
                        # Persist across reboots
                        mkdir -p /host-etc/sysctl.d
                        echo "vm.max_map_count=262144" > /host-etc/sysctl.d/99-wazuh.conf
                        echo "vm.max_map_count now: $(cat /host-proc/sys/vm/max_map_count)"
                        # Keep container alive briefly so logs can be read before we delete the DS
                        sleep 180
                    volumeMounts:
                      - name: host-proc
                        mountPath: /host-proc
                      - name: host-etc
                        mountPath: /host-etc
                restartPolicy: Always
                volumes:
                  - name: host-proc
                    hostPath:
                      path: /proc
                      type: Directory
                  - name: host-etc
                    hostPath:
                      path: /etc
                      type: Directory
          EOF
          kubectl apply -f /tmp/wazuh-sysctl-ds.yaml

      - name: Wait & verify sysctl DS
        run: |
          kubectl -n kube-system rollout status ds/wazuh-sysctl --timeout=180s || true
          echo "---- DaemonSet pods ----"
          kubectl -n kube-system get pods -l app=wazuh-sysctl -o wide
          echo "---- vm.max_map_count from each pod ----"
          for p in $(kubectl -n kube-system get pods -l app=wazuh-sysctl -o name); do
            echo "# $p"
            kubectl -n kube-system logs "$p" || true
          done

      - name: Cleanup sysctl DS (keeps /etc/sysctl.d/99-wazuh.conf on nodes)
        run: |
          kubectl -n kube-system delete ds/wazuh-sysctl --ignore-not-found=true
      # ---------------- END SYSCTL ----------------

      - name: Ensure dynamic StorageClass alias 'wazuh-storage'
        run: |
          set -euo pipefail
          if kubectl get sc local-path >/dev/null 2>&1; then
            TARGET_SC="local-path"
          else
            TARGET_SC=$(kubectl get sc -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.provisioner}{"\n"}{end}' \
              | awk '$2!="kubernetes.io/no-provisioner"{print $1; exit}')
          fi
          test -n "${TARGET_SC:-}" || { echo "::error::No dynamic StorageClass found"; exit 1; }
          TARGET_PROV=$(kubectl get sc "$TARGET_SC" -o jsonpath='{.provisioner}')
          echo "Using SC '${TARGET_SC}' (${TARGET_PROV}) for wazuh-storage"

          if kubectl get sc wazuh-storage >/dev/null 2>&1; then
            CUR_PROV=$(kubectl get sc wazuh-storage -o jsonpath='{.provisioner}')
            if [ "$CUR_PROV" != "$TARGET_PROV" ]; then
              kubectl delete sc wazuh-storage
            fi
          fi

          cat <<EOF | kubectl apply -f -
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: wazuh-storage
          provisioner: ${TARGET_PROV}
          reclaimPolicy: Delete
          volumeBindingMode: WaitForFirstConsumer
          allowVolumeExpansion: true
          EOF

          kubectl get sc -o wide

      - name: Fetch official wazuh-kubernetes repo
        run: |
          set -euo pipefail
          rm -rf wazuh-kubernetes
          git clone --depth 1 --branch "$WAZUH_K8S_TAG" https://github.com/wazuh/wazuh-kubernetes.git
          echo "Fetched wazuh-kubernetes@$WAZUH_K8S_TAG"
          ls -la wazuh-kubernetes

      - name: Determine overlay path
        id: pick
        run: |
          case "$OVERLAY" in
            single-node)        echo "overlay_path=single-node"        >> "$GITHUB_OUTPUT" ;;
            production-cluster) echo "overlay_path=production_cluster" >> "$GITHUB_OUTPUT" ;;
            *) echo "::error::Unknown overlay: $OVERLAY"; exit 1 ;;
          esac

      - name: Inject namespace if missing (idempotent)
        run: |
          set -euo pipefail
          cd wazuh-kubernetes/${{ steps.pick.outputs.overlay_path }}
          for f in $(find . -name '*.yaml' -o -name '*.yml'); do
            if ! grep -qE '^[[:space:]]*namespace:' "$f"; then
              awk -v ns="$NS" '
                BEGIN{inmeta=0}
                /^metadata:/ {print; inmeta=1; next}
                inmeta==1 && !printed && $0 ~ /^[[:space:]]{2}name:/ {print; print "  namespace: " ns; printed=1; next}
                {print}
              ' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
            fi
          done

      - name: Apply official manifests
        run: |
          kubectl apply -f wazuh-kubernetes/${{ steps.pick.outputs.overlay_path }}/

      - name: Wait for core components
        run: |
          set -euxo pipefail
          kubectl -n "$NS" get pods -o wide || true
          kubectl -n "$NS" wait --for=condition=Ready pod -l app=wazuh-manager  --timeout=1200s || true
          kubectl -n "$NS" wait --for=condition=Ready pod -l app=wazuh-indexer  --timeout=1200s || true
          kubectl -n "$NS" wait --for=condition=Ready pod -l app=wazuh-dashboard --timeout=1200s || true
          kubectl -n "$NS" get pods -o wide

      - name: Expose Dashboard via NodePort + print URL
        run: |
          set -euo pipefail
          SVC=$(kubectl -n "$NS" get svc -l app=wazuh-dashboard -o jsonpath='{.items[0].metadata.name}' || true)
          if [ -z "$SVC" ]; then
            echo "::warning::Dashboard Service not found; skipping."
            exit 0
          fi
          kubectl -n "$NS" patch svc "$SVC" -p '{"spec":{"type":"NodePort"}}'
          kubectl -n "$NS" patch svc "$SVC" --type='json' -p='[{"op":"remove","path":"/spec/ports/0/nodePort"}]' || true
          PORT=$(kubectl -n "$NS" get svc "$SVC" -o jsonpath='{.spec.ports[0].nodePort}')
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}' | head -n1)
          echo "üåê Wazuh Dashboard: https://${NODE_IP}:${PORT}"
          echo "‚ÑπÔ∏è  Accept the self-signed certificate warning on first visit."

      - name: Final status
        run: |
          kubectl -n "$NS" get svc -o wide
          kubectl -n "$NS" get pods -o wide
