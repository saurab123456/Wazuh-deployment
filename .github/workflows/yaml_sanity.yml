name: kubeconfig-test

on:
  workflow_dispatch: {}

jobs:
  probe:
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]

    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      KCFG_NEW: ${{ secrets.KUBE_CONFIG_B64_RONIN_NEW }}
      KCFG_OLD: ${{ secrets.KUBE_CONFIG_B64 }}
      API_CANDIDATES: ${{ secrets.RONIN_API_CANDIDATES }}

    steps:
      - uses: actions/checkout@v4

      - name: Ensure tools (kubectl, yq, nc) without sudo to ~/bin
        shell: bash
        run: |
          set -euo pipefail
          BIN="$HOME/bin"; mkdir -p "$BIN"; export PATH="$BIN:$PATH"; echo "$BIN" >> "$GITHUB_PATH"
          if ! command -v kubectl >/dev/null 2>&1; then
            VER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
            curl -fsSL -o "$BIN/kubectl" "https://dl.k8s.io/release/${VER}/bin/linux/amd64/kubectl"
            chmod +x "$BIN/kubectl"
          fi
          if ! command -v yq >/dev/null 2>&1; then
            curl -fsSL -o "$BIN/yq" https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            chmod +x "$BIN/yq"
          fi
          sudo -n apt-get update -y >/dev/null 2>&1 || true
          sudo -n apt-get install -y --no-install-recommends netcat-openbsd >/dev/null 2>&1 || true
          kubectl version --client=true | head -n1 || true
          yq --version || true

      - name: Write kubeconfig (prefer NEW secret, fallback to OLD)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${KCFG_NEW:-}" ]; then
            printf '%s' "$KCFG_NEW" | base64 -d > "$KUBECONFIG"
          elif [ -n "${KCFG_OLD:-}" ]; then
            printf '%s' "$KCFG_OLD" | base64 -d > "$KUBECONFIG"
          else
            echo "::error::No kubeconfig secret provided"; exit 1
          fi
          chmod 600 "$KUBECONFIG"

          echo "== kubeconfig summary (redacted) =="
          # List all servers we can see
          yq -r '.clusters[]? | .name + " -> " + (.cluster.server // "<none>")' "$KUBECONFIG" || true
          # Verify certs are embedded (shows the keys only, not the data)
          yq -r '.clusters[]?.cluster | {has_ca_data: has("certificate-authority-data")}' "$KUBECONFIG" || true
          yq -r '.users[]?.user | {has_client_cert_data: has("client-certificate-data"), has_client_key_data: has("client-key-data")}' "$KUBECONFIG" || true

      - name: Connect to API (try kubeconfig URL, then candidates)
        shell: bash
        run: |
          set -euo pipefail

          get_host_port () {
            local url="$1" host port
            host="$(echo "$url" | sed -E 's#^https?://([^:/]+).*#\1#')"
            port="$(echo "$url" | sed -nE 's#^https?://[^:/]+:([0-9]+).*#\1#p')"
            echo "${host} ${port:-6443}"
          }

          norm_url () {
            local s; s="$(echo "$1" | xargs)"
            [ -z "$s" ] && { echo ""; return; }
            if [[ "$s" =~ ^https?:// ]]; then echo "$s";
            elif [[ "$s" =~ :[0-9]+$ ]]; then echo "https://$s";
            else echo "https://$s:6443"; fi
          }

          try_url () {
            local url="$1"; read host port < <(get_host_port "$url")
            if [ -z "$host" ]; then echo "Skip empty URL"; return 1; fi
            echo "Probing ${host}:${port} …"
            if nc -z -w3 "$host" "$port" >/dev/null 2>&1; then
              echo "Updating kubeconfig to: $url"
              yq -i ".clusters[].cluster.server = \"$url\"" "$KUBECONFIG"
              if kubectl --request-timeout=10s cluster-info >/dev/null 2>&1; then
                echo "✅ Connected to $url"
                kubectl cluster-info
                kubectl get nodes -o wide || true
                kubectl get ns || true
                return 0
              else
                echo "TLS/API check failed for $url (trying next)…"
              fi
            else
              echo "No TCP route to ${host}:${port}"
            fi
            return 1
          }

          # Try every server we can find in kubeconfig (some files have multiple clusters)
          mapfile -t SERVERS < <(yq -r '.clusters[]?.cluster.server // empty' "$KUBECONFIG" | xargs -L1 echo)
          for S in "${SERVERS[@]:-}"; do
            try_url "$S" && exit 0
          done

          # Then try explicit candidates if provided
          if [ -n "${API_CANDIDATES:-}" ]; then
            IFS=',' read -ra ARR <<< "$API_CANDIDATES"
            for raw in "${ARR[@]}"; do
              URL="$(norm_url "$raw")"
              [ -z "$URL" ] && continue
              try_url "$URL" && exit 0
            done
          fi

          echo "::error::Could not reach any Kubernetes API endpoint directly. Update kubeconfig secret or candidates."
          exit 1
