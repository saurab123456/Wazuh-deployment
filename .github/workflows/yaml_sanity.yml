name: kubeconfig-test

on:
  workflow_dispatch: {}

jobs:
  probe:
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]

    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      RAW_KCFG: ${{ secrets.KUBECONFIG }}                 # RAW ~/.kube/config
      KCFG_NEW_B64: ${{ secrets.KUBE_CONFIG_B64_RONIN_NEW }}  # base64 (optional)
      KCFG_OLD_B64: ${{ secrets.KUBE_CONFIG_B64 }}            # base64 (optional)
      API_CANDIDATES: ${{ secrets.RONIN_API_CANDIDATES }}

    steps:
      - uses: actions/checkout@v4

      - name: Ensure kubectl & yq
        shell: bash
        run: |
          set -euo pipefail
          BIN="$HOME/.local/bin"; mkdir -p "$BIN"
          echo "$BIN" >> "$GITHUB_PATH"

          # kubectl
          if ! command -v kubectl >/dev/null 2>&1; then
            echo "Installing kubectl..."
            curl -fsSL -o "$BIN/kubectl" "https://dl.k8s.io/release/v1.30.14/bin/linux/amd64/kubectl"
            chmod +x "$BIN/kubectl"
          fi

          # yq
          if ! command -v yq >/dev/null 2>&1; then
            echo "Installing yq..."
            curl -fsSL -o "$BIN/yq" "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
            chmod +x "$BIN/yq"
          fi

          kubectl version --client=true || true
          yq --version || true

      - name: Write kubeconfig (prefer RAW, then base64)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${RAW_KCFG:-}" ]; then
            echo "Using RAW kubeconfig"
            printf "%s" "$RAW_KCFG" > "$KUBECONFIG"
          elif [ -n "${KCFG_NEW_B64:-}" ]; then
            echo "Using base64 kubeconfig (NEW)"
            printf "%s" "$KCFG_NEW_B64" | base64 -d > "$KUBECONFIG"
          elif [ -n "${KCFG_OLD_B64:-}" ]; then
            echo "Using base64 kubeconfig (OLD)"
            printf "%s" "$KCFG_OLD_B64" | base64 -d > "$KUBECONFIG"
          else
            echo "::error::No kubeconfig secret provided"
            exit 1
          fi
          chmod 600 "$KUBECONFIG"

          echo "== kubeconfig summary =="
          yq -r '.clusters[]? | .name + " -> " + (.cluster.server // "<none>")' "$KUBECONFIG" || true
          yq -r '.clusters[]?.cluster | {has_ca_data: has("certificate-authority-data")}' "$KUBECONFIG" || true
          yq -r '.users[]?.user | {has_client_cert_data: has("client-certificate-data"), has_client_key_data: has("client-key-data")}' "$KUBECONFIG" || true

      - name: Connect to API
        shell: bash
        run: |
          set -euo pipefail

          try_url () {
            local url="$1"
            echo "Trying $url ..."
            yq -i ".clusters[].cluster.server = \"$url\"" "$KUBECONFIG"
            if kubectl --request-timeout=10s cluster-info >/dev/null 2>&1; then
              echo "âœ… Connected to $url"
              kubectl cluster-info
              kubectl get nodes -o wide || true
              kubectl get ns || true
              return 0
            fi
            return 1
          }

          # Try all servers in kubeconfig
          mapfile -t SERVERS < <(yq -r '.clusters[]?.cluster.server // empty' "$KUBECONFIG")
          for S in "${SERVERS[@]:-}"; do
            try_url "$S" && exit 0
          done

          # Try candidate list if given
          if [ -n "${API_CANDIDATES:-}" ]; then
            IFS=',' read -ra ARR <<< "$API_CANDIDATES"
            for raw in "${ARR[@]}"; do
              url="$(echo "$raw" | xargs)"
              [ -z "$url" ] && continue
              case "$url" in
                https://*) try_url "$url" && exit 0 ;;
                *) try_url "https://$url" && exit 0 ;;
              esac
            done
          fi

          echo "::error::Could not reach any Kubernetes API endpoint."
          exit 1
