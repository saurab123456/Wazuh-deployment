name: "Wazuh Manager - enable passwordless authd (manual)"

on:
  workflow_dispatch: {}

concurrency:
  group: wazuh-manager-authd
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  patch-authd:
    runs-on: self-hosted

    env:
      # Adjust if your manager/agents live in a different namespace or labels differ
      NS: "wazuh"
      MANAGER_SELECTOR: "app=wazuh-manager"
      # Services in your cluster: authd=1515 on 'wazuh', events=1514 on 'wazuh-workers'
      AUTHD_SVC: "wazuh.wazuh.svc.cluster.local"
      EVENTS_SVC: "wazuh-workers.wazuh.svc.cluster.local"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl (no sudo)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/bin"
          curl -fsSL -o "$HOME/bin/kubectl" "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x "$HOME/bin/kubectl"
          echo "$HOME/bin" >> "$GITHUB_PATH"
          kubectl version --client --output=yaml

      - name: Load kubeconfig from secret
        shell: bash
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        run: |
          set -euo pipefail
          test -n "${KUBE_CONFIG_B64:-}"
          mkdir -p "$HOME/.kube"
          echo "$KUBE_CONFIG_B64" | base64 -d > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"
          kubectl config current-context
          kubectl get nodes -o wide || true

      - name: Find Wazuh manager pod
        id: findpod
        shell: bash
        run: |
          set -euo pipefail
          POD="$(kubectl -n "$NS" get pod -l "$MANAGER_SELECTOR" -o jsonpath='{.items[0].metadata.name}')"
          if [ -z "$POD" ]; then
            echo "No manager pod found with label $MANAGER_SELECTOR in ns $NS" >&2
            kubectl -n "$NS" get pods -l "$MANAGER_SELECTOR" || true
            exit 1
          fi
          echo "pod=$POD" >> "$GITHUB_OUTPUT"
          echo "Found manager pod: $POD in ns $NS"

      - name: Enable passwordless authd on manager (ossec.conf)
        shell: bash
        run: |
          set -euo pipefail
          POD="${{ steps.findpod.outputs.pod }}"
          CONF="/var/ossec/etc/ossec.conf"

          # Backup
          kubectl -n "$NS" exec "$POD" -- sh -lc "cp -f $CONF ${CONF}.bak.$(date +%s)"

          # Ensure <auth> exists with <use_password>no</use_password> and permissive TLS for lab
          kubectl -n "$NS" exec "$POD" -- sh -lc '
            set -e
            CONF="/var/ossec/etc/ossec.conf"
            if grep -q "<auth>" "$CONF"; then
              # set passwordless
              if grep -q "<use_password>" "$CONF"; then
                sed -i "s#<use_password>.*</use_password>#<use_password>no</use_password>#" "$CONF"
              else
                awk '"'"'/<auth>/{print;ins=1;next} ins && /<\/auth>/{print "    <use_password>no</use_password>"; print; ins=0; next} {print}'"'"' "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
              fi
              # relax TLS for lab
              grep -q "<ssl_verify_host>" "$CONF" || sed -i "s#</auth>#  <ssl_verify_host>no</ssl_verify_host>\n</auth>#g" "$CONF"
              grep -q "<ssl_auto_negotiate>" "$CONF" || sed -i "s#</auth>#  <ssl_auto_negotiate>yes</ssl_auto_negotiate>\n</auth>#g" "$CONF"
            else
              awk '"'"'/<\/ossec_config>/{print "  <auth>\n    <disabled>no</disabled>\n    <port>1515</port>\n    <use_source_ip>no</use_source_ip>\n    <purge>no</purge>\n    <use_password>no</use_password>\n    <ssl_verify_host>no</ssl_verify_host>\n    <ssl_auto_negotiate>yes</ssl_auto_negotiate>\n  </auth>"; print; next} {print}'"'"' "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
            fi
          '

          echo "Resulting <auth> block:"
          kubectl -n "$NS" exec "$POD" -- sh -lc "awk '/<auth>/{p=1} p; /<\\/auth>/{exit}' $CONF || true"

      - name: Ensure manager <remote> listens on 1514/tcp secure
        shell: bash
        run: |
          set -euo pipefail
          POD="${{ steps.findpod.outputs.pod }}"
          CONF="/var/ossec/etc/ossec.conf"
          kubectl -n "$NS" exec "$POD" -- sh -lc '
            set -e
            CONF="/var/ossec/etc/ossec.conf"
            if grep -q "<remote>" "$CONF"; then
              sed -i "s#<connection>.*</connection>#<connection>secure</connection>#; s#<protocol>.*</protocol>#<protocol>tcp</protocol>#; s#<port>.*</port>#<port>1514</port>#" "$CONF"
              grep -q "<connection>secure</connection>" "$CONF" || sed -i "s#</remote>#  <connection>secure</connection>\n</remote>#g" "$CONF"
              grep -q "<protocol>tcp</protocol>" "$CONF"      || sed -i "s#</remote>#  <protocol>tcp</protocol>\n</remote>#g" "$CONF"
              grep -q "<port>1514</port>" "$CONF"             || sed -i "s#</remote>#  <port>1514</port>\n</remote>#g" "$CONF"
            else
              awk '"'"'/<\/ossec_config>/{print "  <remote>\n    <connection>secure</connection>\n    <port>1514</port>\n    <protocol>tcp</protocol>\n  </remote>"; print; next} {print}'"'"' "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
            fi
          '
          echo "Resulting <remote> block:"
          kubectl -n "$NS" exec "$POD" -- sh -lc "awk '/<remote>/{p=1} p; /<\\/remote>/{exit}' $CONF || true"

      - name: Restart Wazuh manager and show last logs
        shell: bash
        run: |
          set -euo pipefail
          POD="${{ steps.findpod.outputs.pod }}"
          kubectl -n "$NS" exec "$POD" -- sh -lc '/var/ossec/bin/wazuh-control restart || true'
          sleep 10
          kubectl -n "$NS" logs "$POD" --tail=120 | tail -n 120 || true

      - name: Update agent ConfigMap to use workers Service for 1514 + rollout agents
        shell: bash
        run: |
          set -euo pipefail
          if kubectl -n "$NS" get cm wazuh-agent-ossec >/dev/null 2>&1; then
            echo "Patching agent ConfigMap ossec.conf address -> $EVENTS_SVC"
            kubectl -n "$NS" get cm wazuh-agent-ossec -o yaml \
              | sed "s#<address>wazuh\\.wazuh\\.svc\\.cluster\\.local</address>#<address>${EVENTS_SVC}</address>#g" \
              | kubectl apply -f -
            echo "Rolling DaemonSet wazuh-agent to pick up new configâ€¦"
            kubectl -n "$NS" rollout restart ds/wazuh-agent
            kubectl -n "$NS" rollout status ds/wazuh-agent --timeout=300s || true
          else
            echo "ConfigMap wazuh-agent-ossec not found in $NS; skipping agent patch."
          fi

      - name: Quick checks (services/endpoints + sample logs)
        shell: bash
        run: |
          set -euo pipefail
          echo "Services:"
          kubectl -n "$NS" get svc -o wide
          echo "Endpoints:"
          kubectl -n "$NS" get endpoints -o wide
          echo "Agent pods:"
          kubectl -n "$NS" get pods -l app=wazuh-agent -o wide || true

          APOD="$(kubectl -n "$NS" get pod -l app=wazuh-agent -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
          if [ -n "$APOD" ]; then
            echo "Testing connectivity from agent pod: $APOD"
            kubectl -n "$NS" exec "$APOD" -- sh -lc '
              command -v nc >/dev/null || (apk add --no-cache netcat-openbsd || true);
              echo "Authd (1515) via ${AUTHD_SVC}:";  nc -vz ${AUTHD_SVC} 1515 || true;
              echo "Events (1514) via ${EVENTS_SVC}:"; nc -vz ${EVENTS_SVC} 1514 || true'
            echo "Last agent logs:"
            kubectl -n "$NS" logs "$APOD" --tail=150 | egrep -i "Valid key|Connected to server|keep alive|ossec-agentd" || true
          else
            echo "No agent pod found (ok)."
          fi
