name: 01) Deploy Wazuh (Storage + Core)

on:
  workflow_dispatch:
    inputs:
      overlay:
        description: "Overlay to deploy (single or production) [ignored if repo uses single root kustomization]"
        required: true
        default: "single"
      wazuh_tag:
        description: "wazuh-kubernetes repo tag (e.g., v4.12.0)"
        required: true
        default: "v4.12.0"
      cleanup_unbound_pvcs:
        description: "Delete UNBOUND PVCs before deploy (true/false)"
        required: true
        default: "true"
      wipe_indexer_pvcs:
        description: "DANGER: delete ALL indexer PVCs if crashloop persists (true/false)"
        required: true
        default: "false"
      local_forward_port:
        description: "Local port for port-forward"
        required: true
        default: "8444"
      enable_port_forward:
        description: "Start port-forward automatically (true/false)"
        required: true
        default: "true"

jobs:
  deploy:
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 180

    env:
      NS: wazuh
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      WAZUH_K8S_TAG: ${{ inputs.wazuh_tag }}
      OVERLAY_CHOICE: ${{ inputs.overlay }}
      CLEANUP_UNBOUND_PVCS: ${{ inputs.cleanup_unbound_pvcs }}
      WIPE_INDEXER_PVCS: ${{ inputs.wipe_indexer_pvcs }}
      LOCAL_FORWARD_PORT: ${{ inputs.local_forward_port }}
      RAW_KCFG: ${{ secrets.KUBECONFIG }}
      KCFG_B64_A: ${{ secrets.KUBE_CONFIG_B64 }}
      KCFG_B64_B: ${{ secrets.KUBECONFIG_B64 }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install CLIs (no sudo) - kubectl/yq/jq to $HOME/bin
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/bin"
          echo "$HOME/bin" >> "$GITHUB_PATH"
          export PATH="$HOME/bin:$PATH"

          # kubectl
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -sS https://dl.k8s.io/release/stable.txt)"
            curl -sSL "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl" -o "$HOME/bin/kubectl"
            chmod +x "$HOME/bin/kubectl"
          fi
          kubectl version --client=true | head -n 1

          # yq
          if ! command -v yq >/dev/null 2>&1; then
            curl -sSL -o "$HOME/bin/yq" https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
            chmod +x "$HOME/bin/yq"
          fi
          yq --version

          # jq
          if ! command -v jq >/dev/null 2>&1; then
            curl -sSL -o "$HOME/bin/jq" https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64
            chmod +x "$HOME/bin/jq"
          fi
          jq --version

      - name: Write kubeconfig from secret (raw or base64)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${RAW_KCFG:-}" ]; then
            printf '%s' "$RAW_KCFG" > "$KUBECONFIG"
          elif [ -n "${KCFG_B64_A:-}" ]; then
            printf '%s' "$KCFG_B64_A" | base64 -d > "$KUBECONFIG"
          elif [ -n "${KCFG_B64_B:-}" ]; then
            printf '%s' "$KCFG_B64_B" | base64 -d > "$KUBECONFIG"
          else
            echo "::error::Provide KUBECONFIG (raw) or KUBE_CONFIG_B64 / KUBECONFIG_B64."; exit 1
          fi
          chmod 600 "$KUBECONFIG"
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Ensure namespace
        shell: bash
        run: |
          kubectl create namespace "$NS" --dry-run=client -o yaml | kubectl apply -f -

      - name: Ensure vm.max_map_count via DaemonSet (kept alive)
        shell: bash
        run: |
          set -euo pipefail
          DS=/tmp/wazuh-sysctl-ds.yaml
          printf '%s\n' \
            'apiVersion: apps/v1' \
            'kind: DaemonSet' \
            'metadata:' \
            '  name: wazuh-sysctl' \
            '  namespace: kube-system' \
            '  labels:' \
            '    app: wazuh-sysctl' \
            'spec:' \
            '  selector:' \
            '    matchLabels:' \
            '      app: wazuh-sysctl' \
            '  template:' \
            '    metadata:' \
            '      labels:' \
            '        app: wazuh-sysctl' \
            '    spec:' \
            '      hostPID: true' \
            '      tolerations:' \
            '        - operator: "Exists"' \
            '      containers:' \
            '        - name: sysctl' \
            '          image: busybox:1.36' \
            '          securityContext:' \
            '            privileged: true' \
            '          command: ["/bin/sh","-c"]' \
            '          args:' \
            '            - |' \
            '              set -e' \
            '              echo 262144 > /host-proc/sys/vm/max_map_count' \
            '              mkdir -p /host-etc/sysctl.d' \
            '              echo "vm.max_map_count=262144" > /host-etc/sysctl.d/99-wazuh.conf' \
            '              sleep 3600' \
            '          volumeMounts:' \
            '            - name: host-proc' \
            '              mountPath: /host-proc' \
            '            - name: host-etc' \
            '              mountPath: /host-etc' \
            '      volumes:' \
            '        - name: host-proc' \
            '          hostPath:' \
            '            path: /proc' \
            '            type: Directory' \
            '        - name: host-etc' \
            '          hostPath:' \
            '            path: /etc' \
            '            type: Directory' \
            > "$DS"
          kubectl apply -f "$DS"
          kubectl -n kube-system get pods -l app=wazuh-sysctl -o wide

      - name: Verify StorageClass alias 'wazuh-storage' exists (do not modify)
        shell: bash
        run: |
          set -euo pipefail
          if ! kubectl get sc wazuh-storage >/dev/null 2>&1; then
            echo "::error::StorageClass 'wazuh-storage' not found. Run the Storage workflow first."; exit 1
          fi
          kubectl get sc wazuh-storage -o wide

      - name: Fetch official wazuh-kubernetes repo
        shell: bash
        run: |
          set -e
          rm -rf wazuh-kubernetes
          git clone --depth 1 --branch "$WAZUH_K8S_TAG" https://github.com/wazuh/wazuh-kubernetes.git

      - name: Resolve overlay path (auto-detect)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          ROOT="wazuh-kuberne
