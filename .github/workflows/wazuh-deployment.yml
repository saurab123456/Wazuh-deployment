name: 01) Deploy Wazuh (Storage + Core)

on:
  workflow_dispatch:
    inputs:
      overlay:
        description: "Overlay to deploy (single or production) [ignored if repo uses single root kustomization]"
        required: true
        default: "single"
      wazuh_tag:
        description: "wazuh-kubernetes repo tag (e.g., v4.12.0)"
        required: true
        default: "v4.12.0"
      local_forward_port:
        description: "Local port for port-forward"
        required: true
        default: "8444"
      enable_port_forward:
        description: "Start port-forward automatically (true/false)"
        required: true
        default: "true"

jobs:
  deploy:
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 120

    env:
      NS: wazuh
      WAZUH_K8S_TAG: ${{ inputs.wazuh_tag }}
      OVERLAY_CHOICE: ${{ inputs.overlay }}
      LOCAL_FORWARD_PORT: ${{ inputs.local_forward_port }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install CLIs (no sudo) - kubectl/yq/jq to $HOME/bin
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/bin"
          echo "$HOME/bin" >> "$GITHUB_PATH"
          export PATH="$HOME/bin:$PATH"
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -sS https://dl.k8s.io/release/stable.txt)"
            curl -sSL "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl" -o "$HOME/bin/kubectl"
            chmod +x "$HOME/bin/kubectl"
          fi
          if ! command -v yq >/dev/null 2>&1; then
            curl -sSL -o "$HOME/bin/yq" https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
            chmod +x "$HOME/bin/yq"
          fi
          if ! command -v jq >/dev/null 2>&1; then
            curl -sSL -o "$HOME/bin/jq" https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64
            chmod +x "$HOME/bin/jq"
          fi

      - name: Ensure namespace
        shell: bash
        run: |
          kubectl create namespace "$NS" --dry-run=client -o yaml | kubectl apply -f -

      - name: Ensure vm.max_map_count via DaemonSet (required by OpenSearch)
        shell: bash
        run: |
          set -euo pipefail
          cat > /tmp/wazuh-sysctl-ds.yaml <<'YAML'
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-sysctl
            namespace: kube-system
            labels: { app: wazuh-sysctl }
          spec:
            selector: { matchLabels: { app: wazuh-sysctl } }
            template:
              metadata: { labels: { app: wazuh-sysctl } }
              spec:
                hostPID: true
                tolerations: [ {operator: "Exists"} ]
                containers:
                  - name: sysctl
                    image: busybox:1.36
                    securityContext: { privileged: true }
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -e
                        echo 262144 > /host-proc/sys/vm/max_map_count
                        mkdir -p /host-etc/sysctl.d
                        echo "vm.max_map_count=262144" > /host-etc/sysctl.d/99-wazuh.conf
                        sleep 3600
                    volumeMounts:
                      - { name: host-proc, mountPath: /host-proc }
                      - { name: host-etc,  mountPath: /host-etc  }
                volumes:
                  - { name: host-proc, hostPath: { path: /proc, type: Directory } }
                  - { name: host-etc,  hostPath: { path: /etc,  type: Directory } }
          YAML
          kubectl apply -f /tmp/wazuh-sysctl-ds.yaml

      - name: Fetch official wazuh-kubernetes repo
        shell: bash
        run: |
          set -e
          rm -rf wazuh-kubernetes
          git clone --depth 1 --branch "$WAZUH_K8S_TAG" https://github.com/wazuh/wazuh-kubernetes.git

      - name: Resolve overlay path (auto-detect)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          ROOT="wazuh-kubernetes/wazuh"
          if [ -f "$ROOT/kustomization.yml" ] || [ -f "$ROOT/kustomization.yaml" ]; then
            PICK="$ROOT"
          else
            PICK="$(find "$ROOT" -type f \( -name 'kustomization.yml' -o -name 'kustomization.yaml' \) -printf '%h\n' | sort -u | head -n1 || true)"
          fi
          test -n "${PICK:-}" || { echo "::error::No kustomize overlay found under $ROOT"; exit 1; }
          echo "overlay_path=$PICK" >> "$GITHUB_OUTPUT"

      - name: Build overlay (drop any StorageClass; single-node tweaks)
        shell: bash
        run: |
          set -e
          kubectl kustomize "${{ steps.resolve.outputs.overlay_path }}" > /tmp/wazuh-all.yaml
          # Never apply StorageClass objects from upstream
          yq e 'select(.kind != "StorageClass")' /tmp/wazuh-all.yaml > /tmp/wazuh-all.nosc.yaml
          mv /tmp/wazuh-all.nosc.yaml /tmp/wazuh-all.yaml
          # Single-node: 1 indexer replica + PVC suggestions inside manifests only (no resize ops)
          yq -i '
            (.[] | select(.kind=="StatefulSet" and .metadata.name=="wazuh-indexer").spec.replicas) = 1
          ' /tmp/wazuh-all.yaml
          # Avoid dashboard replace conflicts on re-run
          kubectl -n "$NS" delete deploy wazuh-dashboard --ignore-not-found=true

      - name: Apply non-StatefulSet resources
        shell: bash
        run: |
          set -e
          yq -o=y e 'select(.kind != "StatefulSet")' /tmp/wazuh-all.yaml > /tmp/non-sts.yaml
          if [ -s /tmp/non-sts.yaml ]; then kubectl -n "$NS" apply -f /tmp/non-sts.yaml; fi

      - name: Recreate StatefulSets (idempotent) and apply
        shell: bash
        run: |
          set -e
          yq -o=y e 'select(.kind == "StatefulSet")' /tmp/wazuh-all.yaml > /tmp/sts.yaml
          for n in $(yq -r '. | select(.kind=="StatefulSet") | .metadata.name' -o=j /tmp/sts.yaml); do
            kubectl -n "$NS" delete statefulset "$n" --ignore-not-found=true
          done
          kubectl -n "$NS" apply -f /tmp/sts.yaml

      # Ensure indexer image set (fixes earlier "image: Required value") and single replica
      - name: Enforce wazuh-indexer image+replicas
        shell: bash
        run: |
          set -euo pipefail
          TAG_NO_V="${WAZUH_K8S_TAG#v}"
          kubectl -n "$NS" get sts wazuh-indexer >/dev/null 2>&1 || { echo "::error::Missing StatefulSet wazuh-indexer"; exit 1; }
          kubectl -n "$NS" set image statefulset/wazuh-indexer wazuh-indexer=wazuh/wazuh-indexer:${TAG_NO_V}
          kubectl -n "$NS" scale statefulset/wazuh-indexer --replicas=1
          IMG="$(kubectl -n "$NS" get sts wazuh-indexer -o jsonpath='{.spec.template.spec.containers[0].image}')"
          [ -n "$IMG" ] || { echo "::error::Indexer image is empty"; exit 1; }
          echo "Indexer image: $IMG"

      - name: Wait for core to be Ready
        shell: bash
        run: |
          set -e
          for sel in "app=wazuh-indexer" "app=wazuh-manager" "app=wazuh-dashboard"; do
            echo "Waiting for: $sel"
            kubectl -n "$NS" wait --for=condition=Ready pod -l "$sel" --timeout=1200s || true
            kubectl -n "$NS" get pods -l "$sel" -o wide
          done

      - name: Discover Dashboard port
        id: dash
        shell: bash
        run: |
          set -euo pipefail
          PORT="$(kubectl -n "$NS" get svc -l app=wazuh-dashboard -o jsonpath='{.items[0].spec.ports[0].port}' 2>/dev/null || true)"
          if [ -z "${PORT:-}" ]; then
            PORT="$(kubectl -n "$NS" get deploy wazuh-dashboard -o jsonpath='{.spec.template.spec.containers[0].ports[0].containerPort}' 2>/dev/null || true)"
          fi
          test -n "${PORT:-}" || { echo "::error::Could not determine dashboard port"; exit 1; }
          echo "dash_port=${PORT}" >> "$GITHUB_OUTPUT"

      - name: Start Dashboard port-forward (optional)
        if: ${{ inputs.enable_port_forward == 'true' }}
        shell: bash
        env:
          PF_BIND: 127.0.0.1
          PF_PORT: ${{ inputs.local_forward_port }}
        run: |
          set -euo pipefail
          TARGET_PORT="${{ steps.dash.outputs.dash_port }}"
          (pkill -f "port-forward .*:${PF_PORT}:" && sleep 1) || true
          nohup kubectl -n "${NS}" port-forward --address "${PF_BIND}" deploy/wazuh-dashboard "${PF_PORT}:${TARGET_PORT}" > portforward.log 2>&1 &
          echo "::notice title=Browse Now::Open http://localhost:${PF_PORT}"

      - name: Final status
        shell: bash
        run: |
          kubectl -n "$NS" get svc -o wide
          kubectl -n "$NS" get pods -o wide
