name: 03) Agent Install + Passwordless Config

on:
  workflow_dispatch:
    inputs:
      manager_dns:
        description: "Manager DNS (Cluster-internal service)"
        default: "wazuh.wazuh.svc.cluster.local"
        required: true
      agent_group:
        description: "Agent registration group"
        default: "default"
        required: true
      agent_image:
        description: "Wazuh Agent image"
        default: "ghcr.io/saurab123456/wazuh-agent:4.12.0"
        required: true
      authd_port:
        description: "authd port on manager (enrollment)"
        default: "1515"
        required: true
      events_port:
        description: "events port to manager (agent -> manager)"
        default: "1514"
        required: true

permissions:
  contents: read

concurrency:
  group: agent-passwordless-${{ github.ref }}
  cancel-in-progress: true

jobs:
  agent_install:
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 30
    env:
      NS: wazuh
      ADMIN_CONF: /etc/kubernetes/admin.conf
      MANAGER_DNS: ${{ github.event.inputs.manager_dns }}
      WAZUH_AGENT_GROUP: ${{ github.event.inputs.agent_group }}
      WAZUH_AGENT_IMAGE: ${{ github.event.inputs.agent_image }}
      AUTHD_PORT: ${{ github.event.inputs.authd_port }}
      EVENTS_PORT: ${{ github.event.inputs.events_port }}

    steps:
      - uses: actions/checkout@v4

      - name: Select kubeconfig (prefer local admin.conf)
        shell: bash
        run: |
          if [ -f "$ADMIN_CONF" ]; then
            echo "KUBECONFIG=$ADMIN_CONF" >> "$GITHUB_ENV"
            echo "Using kubeconfig: $ADMIN_CONF"
          elif [ -f "$HOME/.kube/config" ]; then
            echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"
            echo "Using kubeconfig: $HOME/.kube/config"
          else
            echo "::error::No kubeconfig found on runner"; exit 1
          fi
          kubectl version --client
          kubectl cluster-info || true

      - name: Ensure namespace exists
        shell: bash
        run: |
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

      # ---- Agent config (ossec.conf) with log sources ----
      - name: Apply ConfigMap (ossec.conf with K8s & node logs)
        shell: bash
        run: |
          cat <<'CM' | envsubst | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: wazuh-agent-ossec
            namespace: ${NS}
            labels:
              app: wazuh-agent
          data:
            ossec.conf: |
              <ossec_config>
                <client>
                  <server>
                    <address>${MANAGER_DNS}</address>
                    <port>${EVENTS_PORT}</port>   <!-- agent -> manager events -->
                    <protocol>tcp</protocol>
                  </server>
                </client>

                <!-- Kubernetes container & pod logs -->
                <localfile>
                  <log_format>json</log_format>
                  <location>/host/var/log/containers/*.log</location>
                </localfile>
                <localfile>
                  <log_format>json</log_format>
                  <location>/host/var/log/pods/*/*.log</location>
                </localfile>

                <!-- Node syslogs (Debian/Ubuntu vs RHEL/CentOS) -->
                <localfile>
                  <log_format>syslog</log_format>
                  <location>/host/var/log/syslog</location>
                </localfile>
                <localfile>
                  <log_format>syslog</log_format>
                  <location>/host/var/log/messages</location>
                </localfile>

                <global>
                  <jsonout_output>yes</jsonout_output>
                  <alerts_log>yes</alerts_log>
                </global>
              </ossec_config>
          CM

      # ---- Agent DaemonSet (passwordless enrollment) ----
      - name: Apply DaemonSet (passwordless enrollment + duplicate-safe names)
        shell: bash
        run: |
          cat <<'YAML' | envsubst | kubectl apply -f -
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-agent
            namespace: ${NS}
            labels: { app: wazuh-agent }
          spec:
            selector:
              matchLabels: { app: wazuh-agent }
            updateStrategy:
              type: RollingUpdate
            template:
              metadata:
                labels: { app: wazuh-agent }
              spec:
                hostNetwork: true
                hostPID: true
                dnsPolicy: ClusterFirstWithHostNet
                terminationGracePeriodSeconds: 30
                tolerations:
                  - { key: node-role.kubernetes.io/master, operator: Exists, effect: NoSchedule }
                  - { key: node-role.kubernetes.io/control-plane, operator: Exists, effect: NoSchedule }
                containers:
                  - name: wazuh-agent
                    image: ${WAZUH_AGENT_IMAGE}
                    imagePullPolicy: IfNotPresent
                    securityContext:
                      privileged: true
                      runAsUser: 0
                    env:
                      - name: NODE_NAME
                        valueFrom: { fieldRef: { fieldPath: spec.nodeName } }
                      - { name: AUTHD_PORT,  value: "${AUTHD_PORT}" }
                      - { name: MANAGER_DNS, value: "${MANAGER_DNS}" }
                      - { name: WAZUH_AGENT_GROUP, value: "${WAZUH_AGENT_GROUP}" }
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -euo pipefail
                        AGENT_NAME_RAW="${NODE_NAME}"
                        MID="$(cat /etc/machine-id 2>/dev/null | head -c 6 || echo rnd$RANDOM)"
                        AGENT_NAME="${AGENT_NAME_RAW}-${MID}"

                        echo "Agent name: ${AGENT_NAME}"
                        echo "Enrolling to ${MANAGER_DNS}:${AUTHD_PORT} (group: ${WAZUH_AGENT_GROUP})"

                        # prepare runtime dirs & config
                        mkdir -p /var/ossec/var/run /var/ossec/queue/sockets /var/ossec/queue/db
                        cp /config/ossec.conf /var/ossec/etc/ossec.conf 2>/dev/null || true
                        rm -f /var/ossec/var/run/*.pid /var/ossec/var/*.lock 2>/dev/null || true

                        enroll() {
                          # Passwordless: manager must have <use_password>no</use_password> under <auth>
                          /var/ossec/bin/agent-auth \
                            -m "${MANAGER_DNS}" -p "${AUTHD_PORT}" \
                            -A "${AGENT_NAME}" \
                            -g "${WAZUH_AGENT_GROUP}"
                        }

                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          for i in $(seq 1 36); do
                            if enroll; then break; fi
                            echo "Enroll attempt ${i} failed; retrying in 5s…"
                            sleep 5
                          done
                        fi

                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          echo "ERROR: Enrollment failed; exiting."; exit 1
                        fi

                        echo "Starting Wazuh agent…"
                        /var/ossec/bin/wazuh-control start
                        sleep 5
                        /var/ossec/bin/wazuh-control status || true

                        echo "==== Tailing agent logs ===="
                        touch /var/ossec/logs/ossec.log /var/ossec/logs/ossec.json 2>/dev/null || true
                        tail -n0 -F /var/ossec/logs/ossec.log
                    readinessProbe:
                      exec:
                        command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"']
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      failureThreshold: 6
                      timeoutSeconds: 5
                    livenessProbe:
                      exec:
                        command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"']
                      initialDelaySeconds: 60
                      periodSeconds: 30
                      failureThreshold: 3
                      timeoutSeconds: 5
                    lifecycle:
                      preStop:
                        exec:
                          command: ["/bin/sh","-c","/var/ossec/bin/wazuh-control stop || true"]
                    resources:
                      requests: { cpu: "100m", memory: "256Mi" }
                    volumeMounts:
                      - { name: ossec-conf-cm,   mountPath: /config, readOnly: true }
                      - { name: varlogcontainers, mountPath: /host/var/log/containers, readOnly: true }
                      - { name: varlogpods,       mountPath: /host/var/log/pods,       readOnly: true }
                      - { name: varlog,           mountPath: /host/var/log,            readOnly: true }
                volumes:
                  - { name: ossec-conf-cm, configMap: { name: wazuh-agent-ossec } }
                  - { name: varlogcontainers, hostPath: { path: /var/log/containers, type: DirectoryOrCreate } }
                  - { name: varlogpods, hostPath: { path: /var/log/pods, type: DirectoryOrCreate } }
                  - { name: varlog, hostPath: { path: /var/log, type: Directory } }
          YAML

      - name: Wait for rollout + quick health
        shell: bash
        run: |
          set -euxo pipefail
          kubectl -n "$NS" rollout status ds/wazuh-agent --timeout=600s
          kubectl -n "$NS" get pods -l app=wazuh-agent -o wide
          POD="$(kubectl -n "$NS" get pod -l app=wazuh-agent -o jsonpath='{.items[0].metadata.name}')"
          echo "Last 120 lines from $POD:"
          kubectl -n "$NS" logs --tail=120 "$POD" || true

      # (Optional) quick enrollment signal from logs
      - name: Check enrollment signals in logs (best effort)
        shell: bash
        continue-on-error: true
        run: |
          PODS="$(kubectl -n "$NS" get pods -l app=wazuh-agent -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')"
          for P in $PODS; do
            echo "== $P =="
            kubectl -n "$NS" logs "$P" | grep -E "agent-auth|Connected to server|Completed" | tail -n 5 || true
          done
