name: 02) Install Wazuh Agent (passwordless enrollment)

on:
  workflow_dispatch:
    inputs:
      groups:
        description: "Agent group(s) to enroll"
        required: true
        default: "kubernetes"

permissions:
  contents: read

concurrency:
  group: agent-${{ github.ref }}
  cancel-in-progress: true

jobs:
  agent:
    # Hard guard: run ONLY when manually dispatched
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 60
    env:
      NS: wazuh
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      GROUPS: ${{ inputs.groups }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq (no sudo) to $HOME/bin
        shell: bash
        run: |
          set -e
          mkdir -p "$HOME/bin"
          if ! command -v jq >/dev/null 2>&1; then
            curl -sSL -o "$HOME/bin/jq" https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64
            chmod +x "$HOME/bin/jq"
          fi
          echo "$HOME/bin" >> "$GITHUB_PATH"

      - name: Write kubeconfig from secret
        shell: bash
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        run: |
          set -e
          test -n "${KUBE_CONFIG_B64:-}" || { echo "::error::Secret KUBE_CONFIG_B64 missing"; exit 1; }
          echo "$KUBE_CONFIG_B64" | base64 -d > "$KUBECONFIG"
          kubectl -n "$NS" get pods -l app=wazuh-manager >/dev/null

      - name: Create Agent ConfigMap (passwordless)
        shell: bash
        run: |
          set -euo pipefail
          cat > /tmp/agent-ossec.conf <<'EOF'
          <ossec_config>
            <client>
              <server>
                <address>wazuh-workers.wazuh.svc.cluster.local</address>
                <port>1514</port>
                <protocol>tcp</protocol>
              </server>
              <enrollment>
                <enabled>yes</enabled>
                <manager_address>wazuh-authd-master.wazuh.svc.cluster.local</manager_address>
                <port>1515</port>
                <use_password>no</use_password>
                <ssl_verify_host>no</ssl_verify_host>
                <auto_negotiate>no</auto_negotiate>
              </enrollment>
            </client>
          </ossec_config>
          EOF
          kubectl -n "$NS" create configmap wazuh-agent-ossec --from-file=ossec.conf=/tmp/agent-ossec.conf -o yaml --dry-run=client | kubectl apply -f -

      - name: Deploy Agent DaemonSet (requests only)
        shell: bash
        env:
          GROUPS: ${{ env.GROUPS }}
        run: |
          set -euo pipefail
          kubectl -n "$NS" delete ds wazuh-agent --ignore-not-found=true
          cat <<'EOF' | kubectl -n "$NS" apply -f -
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-agent
            labels: { app: wazuh-agent }
          spec:
            selector: { matchLabels: { app: wazuh-agent } }
            updateStrategy: { type: RollingUpdate }
            template:
              metadata: { labels: { app: wazuh-agent } }
              spec:
                hostNetwork: true
                hostPID: true
                dnsPolicy: ClusterFirstWithHostNet
                terminationGracePeriodSeconds: 30
                tolerations:
                  - { key: node-role.kubernetes.io/master, operator: Exists, effect: NoSchedule }
                  - { key: node-role.kubernetes.io/control-plane, operator: Exists, effect: NoSchedule }
                containers:
                  - name: wazuh-agent
                    image: ghcr.io/saurab123456/wazuh-agent:4.12.0
                    imagePullPolicy: IfNotPresent
                    securityContext: { privileged: true, runAsUser: 0 }
                    env:
                      - name: NODE_NAME
                        valueFrom: { fieldRef: { fieldPath: spec.nodeName } }
                      - name: AUTHD_PORT
                        value: "1515"
                      - name: MANAGER_DNS
                        value: "wazuh-authd-master.wazuh.svc.cluster.local"
                      # GROUPS comes from the pod env; script defaults to kubernetes if empty
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -e
                        AGENT_NAME="${NODE_NAME}"
                        echo "Agent name: $AGENT_NAME"
                        mkdir -p /var/ossec/var/run /var/ossec/queue/sockets /var/ossec/queue/db
                        cp /config/ossec.conf /var/ossec/etc/ossec.conf 2>/dev/null || true
                        rm -f /var/ossec/var/run/*.pid /var/ossec/var/*.lock 2>/dev/null || true
                        enroll() {
                          echo "Enrolling to ${MANAGER_DNS}:${AUTHD_PORT} (group=${GROUPS:-kubernetes})…"
                          /var/ossec/bin/agent-auth -m "${MANAGER_DNS}" -p "${AUTHD_PORT}" -A "${AGENT_NAME}" -G "${GROUPS:-kubernetes}"
                        }
                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          for i in $(seq 1 36); do
                            if enroll; then break; fi
                            echo "Enroll attempt $i failed; retrying in 5s…"
                            sleep 5
                          done
                        fi
                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          echo "ERROR: Enrollment failed; exiting."
                          exit 1
                        fi
                        echo "Starting Wazuh agent…"
                        /var/ossec/bin/wazuh-control start
                        sleep 5
                        /var/ossec/bin/wazuh-control status
                        tail -f /var/ossec/logs/ossec.log
                    readinessProbe:
                      exec: { command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"'] }
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      failureThreshold: 6
                      timeoutSeconds: 5
                    livenessProbe:
                      exec: { command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"'] }
                      initialDelaySeconds: 60
                      periodSeconds: 30
                      failureThreshold: 3
                      timeoutSeconds: 5
                    lifecycle:
                      preStop:
                        exec: { command: ["/bin/sh","-c","/var/ossec/bin/wazuh-control stop || true"] }
                    resources:
                      requests: { cpu: "100m", memory: "256Mi" }
                    volumeMounts:
                      - { name: ossec-conf-cm,   mountPath: /config,                    readOnly: true }
                      - { name: varlogcontainers, mountPath: /host/var/log/containers,   readOnly: true }
                      - { name: varlogpods,       mountPath: /host/var/log/pods,         readOnly: true }
                      - { name: varlog,           mountPath: /host/var/log,              readOnly: true }
                volumes:
                  - { name: ossec-conf-cm,   configMap: { name: wazuh-agent-ossec } }
                  - { name: varlogcontainers, hostPath: { path: /var/log/containers, type: DirectoryOrCreate } }
                  - { name: varlogpods,       hostPath: { path: /var/log/pods,       type: DirectoryOrCreate } }
                  - { name: varlog,           hostPath: { path: /var/log,            type: Directory } }
          EOF
          kubectl -n "$NS" rollout status ds/wazuh-agent --timeout=600s || true
          kubectl -n "$NS" get pods -l app=wazuh-agent -o wide

      - name: Probe authd connectivity (1515)
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NS" delete pod probe-authd --ignore-not-found=true
          kubectl -n "$NS" run probe-authd --image=busybox:1.36 --restart=Never -- \
            sh -lc 'set -e; nslookup wazuh-authd-master || true; for i in $(seq 1 12); do nc -vz -w 2 wazuh-authd-master 1515 && exit 0; echo retry; sleep 2; done; exit 1'
          kubectl -n "$NS" logs pod/probe-authd || true
          kubectl -n "$NS" delete pod probe-authd --ignore-not-found=true

      - name: Final agent status
        shell: bash
        run: |
          kubectl -n "$NS" get pods -l app=wazuh-agent -o wide
