name: Deploy Wazuh (Official Kubernetes Manifests, passwordless)

on:
  workflow_dispatch:
    inputs:
      overlay:
        description: "Overlay to deploy (single or production) [ignored if repo uses single root kustomization]"
        required: true
        default: "single"
      wazuh_tag:
        description: "wazuh-kubernetes repo tag (e.g., v4.12.0)"
        required: true
        default: "v4.12.0"
      cleanup_unbound_pvcs:
        description: "Delete UNBOUND PVCs before deploy (true/false)"
        required: true
        default: "true"
      local_forward_port:
        description: "Local port for port-forward"
        required: true
        default: "8444"
      enable_port_forward:
        description: "Start port-forward automatically (true/false)"
        required: true
        default: "true"

jobs:
  deploy:
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 180

    env:
      NS: wazuh
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      WAZUH_K8S_TAG: ${{ inputs.wazuh_tag }}
      OVERLAY_CHOICE: ${{ inputs.overlay }}
      CLEANUP_UNBOUND_PVCS: ${{ inputs.cleanup_unbound_pvcs }}
      LOCAL_FORWARD_PORT: ${{ inputs.local_forward_port }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure kubectl
        shell: bash
        run: |
          set -e
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -sS https://dl.k8s.io/release/stable.txt)"
            curl -sSLo kubectl "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          fi
          kubectl version --client=true | head -n 1

      - name: Install yq (YAML CLI)
        shell: bash
        run: |
          set -e
          if ! command -v yq >/dev/null 2>&1; then
            sudo curl -sSL -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi
          yq --version

      - name: Write kubeconfig from secret
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        shell: bash
        run: |
          set -e
          test -n "$KUBE_CONFIG_B64" || { echo "::error::Secret KUBE_CONFIG_B64 missing"; exit 1; }
          echo "$KUBE_CONFIG_B64" | base64 -d > "$KUBECONFIG"
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Ensure namespace
        shell: bash
        run: |
          kubectl create namespace "$NS" --dry-run=client -o yaml | kubectl apply -f -

      # ---------- SYSCTL ----------
      - name: Set vm.max_map_count on nodes (DaemonSet)
        shell: bash
        run: |
          cat > /tmp/wazuh-sysctl-ds.yaml <<'EOF'
          apiVersion: apps/v1
          kind: DaemonSet
          metadata: { name: wazuh-sysctl, namespace: kube-system, labels: { app: wazuh-sysctl } }
          spec:
            selector: { matchLabels: { app: wazuh-sysctl } }
            template:
              metadata: { labels: { app: wazuh-sysctl } }
              spec:
                hostPID: true
                tolerations: [ { operator: "Exists" } ]
                containers:
                  - name: sysctl
                    image: busybox:1.36
                    securityContext: { privileged: true }
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -e
                        echo 262144 > /host-proc/sys/vm/max_map_count
                        mkdir -p /host-etc/sysctl.d
                        echo "vm.max_map_count=262144" > /host-etc/sysctl.d/99-wazuh.conf
                        echo "now: $(cat /host-proc/sys/vm/max_map_count)"
                        sleep 60
                    volumeMounts:
                      - { name: host-proc, mountPath: /host-proc }
                      - { name: host-etc,  mountPath: /host-etc  }
                volumes:
                  - { name: host-proc, hostPath: { path: /proc, type: Directory } }
                  - { name: host-etc,  hostPath: { path: /etc,  type: Directory } }
          EOF
          kubectl apply -f /tmp/wazuh-sysctl-ds.yaml
          kubectl -n kube-system rollout status ds/wazuh-sysctl --timeout=180s || true
          kubectl -n kube-system delete ds/wazuh-sysctl --ignore-not-found=true
      # ---------- END SYSCTL ----------

      - name: Ensure StorageClass alias 'wazuh-storage'
        shell: bash
        run: |
          set -e
          if kubectl get sc local-path >/dev/null 2>&1; then
            TARGET_SC="local-path"
          else
            TARGET_SC="$(kubectl get sc -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.provisioner}{"\n"}{end}' | awk '$2!="kubernetes.io/no-provisioner"{print $1; exit}')"
          fi
          test -n "$TARGET_SC" || { echo "::error::No dynamic StorageClass found"; exit 1; }
          TARGET_PROV="$(kubectl get sc "$TARGET_SC" -o jsonpath='{.provisioner}')"
          if kubectl get sc wazuh-storage >/dev/null 2>&1; then
            CUR_PROV="$(kubectl get sc wazuh-storage -o jsonpath='{.provisioner}')"
            if [ "$CUR_PROV" != "$TARGET_PROV" ]; then kubectl delete sc wazuh-storage; fi
          fi
          cat <<EOF | kubectl apply -f -
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata: { name: wazuh-storage }
          provisioner: ${TARGET_PROV}
          reclaimPolicy: Delete
          volumeBindingMode: WaitForFirstConsumer
          allowVolumeExpansion: true
          EOF

      - name: Fetch official wazuh-kubernetes repo
        shell: bash
        run: |
          set -e
          rm -rf wazuh-kubernetes
          git clone --depth 1 --branch "$WAZUH_K8S_TAG" https://github.com/wazuh/wazuh-kubernetes.git
          ls -la wazuh-kubernetes | sed -n '1,120p'

      - name: Resolve overlay path (auto-detect)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          ROOT="wazuh-kubernetes/wazuh"
          echo "Tree under $ROOT:"; ls -la "$ROOT" | sed -n '1,200p' || true
          if [ -f "$ROOT/kustomization.yml" ] || [ -f "$ROOT/kustomization.yaml" ]; then
            PICK="$ROOT"
          else
            PICK="$(find "$ROOT" -type f \( -name 'kustomization.yml' -o -name 'kustomization.yaml' \) -printf '%h\n' | sort -u | head -n1 || true)"
          fi
          test -n "${PICK:-}" || { echo "::error::Could not find any kustomize overlays under $ROOT"; exit 1; }
          echo "overlay_path=$PICK" >> "$GITHUB_OUTPUT"
          echo "Resolved overlay_path=$PICK"

      - name: Generate self-signed certs for Kustomize (indexer + dashboard_http)
        shell: bash
        run: |
          set -e
          CERTROOT="${{ github.workspace }}/wazuh-kubernetes/wazuh/certs"
          IC="${CERTROOT}/indexer_cluster"
          DH="${CERTROOT}/dashboard_http"
          mkdir -p "$IC" "$DH"
          cat > /tmp/wazuh-openssl.cnf <<'CONF'
          [req]
          default_bits=2048
          prompt=no
          default_md=sha256
          req_extensions = v3_req
          distinguished_name=req_dn
          [req_dn]
          CN=wazuh-local
          [v3_req]
          basicConstraints = CA:FALSE
          keyUsage = digitalSignature, keyEncipherment
          extendedKeyUsage = serverAuth, clientAuth
          subjectAltName = @alt_names
          [alt_names]
          DNS.1 = wazuh-indexer
          DNS.2 = wazuh-indexer.wazuh.svc
          DNS.3 = wazuh-dashboard
          DNS.4 = wazuh-dashboard.wazuh.svc
          DNS.5 = localhost
          IP.1  = 127.0.0.1
          CONF
          openssl genrsa -out "$IC/root-ca-key.pem" 4096
          openssl req -x509 -new -key "$IC/root-ca-key.pem" -sha256 -days 3650 -out "$IC/root-ca.pem" -subj "/CN=Wazuh Root CA"
          sign_ic() {
            local name="$1"
            openssl genrsa -out "$IC/${name}-key.pem" 2048
            openssl req -new -key "$IC/${name}-key.pem" -out "$IC/${name}.csr" -config /tmp/wazuh-openssl.cnf
            openssl x509 -req -in "$IC/${name}.csr" -CA "$IC/root-ca.pem" -CAkey "$IC/root-ca-key.pem" -CAcreateserial -out "$IC/${name}.pem" -days 825 -sha256 -extensions v3_req -extfile /tmp/wazuh-openssl.cnf
            rm -f "$IC/${name}.csr"
          }
          for n in admin dashboard node filebeat; do sign_ic "$n"; done
          openssl genrsa -out "$DH/key.pem" 2048
          openssl req -new -key "$DH/key.pem" -out "$DH/dashboard.csr" -config /tmp/wazuh-openssl.cnf
          openssl x509 -req -in "$DH/dashboard.csr" -CA "$IC/root-ca.pem" -CAkey "$IC/root-ca-key.pem" -CAcreateserial -out "$DH/cert.pem" -days 825 -sha256 -extensions v3_req -extfile /tmp/wazuh-openssl.cnf
          rm -f "$DH/dashboard.csr"

      - name: Build overlay with Kustomize
        shell: bash
        run: |
          set -e
          OVER="${{ steps.resolve.outputs.overlay_path }}"
          kubectl kustomize "$OVER" > /tmp/wazuh-all.yaml
          echo "Built: /tmp/wazuh-all.yaml"
          kubectl -n "$NS" delete deploy wazuh-dashboard --ignore-not-found=true

      - name: Optional cleanup (delete UNBOUND PVCs only)
        shell: bash
        run: |
          set -e
          if [ "${CLEANUP_UNBOUND_PVCS}" = "true" ]; then
            UNBOUND="$(kubectl -n "$NS" get pvc --no-headers 2>/dev/null | awk '$2!="Bound"{print $1}')"
            if [ -n "$UNBOUND" ]; then
              for p in $UNBOUND; do kubectl -n "$NS" delete pvc "$p" --ignore-not-found; done
            fi
          fi

      - name: Apply non-StatefulSet resources (filter out StorageClass)
        shell: bash
        run: |
          set -e
          yq -o=y e 'select(.kind != "StorageClass" and .kind != "StatefulSet")' /tmp/wazuh-all.yaml > /tmp/wazuh-no-sts-sc.yaml
          if [ -s /tmp/wazuh-no-sts-sc.yaml ]; then kubectl -n "$NS" apply -f /tmp/wazuh-no-sts-sc.yaml; fi

      - name: Recreate StatefulSets to avoid immutability errors
        shell: bash
        run: |
          set -e
          NAMES="$(yq -r 'select(.kind == "StatefulSet" and .metadata.name != null) | .metadata.name' /tmp/wazuh-all.yaml | sed 's/\r$//' | grep -E '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$' || true)"
          if [ -n "$NAMES" ]; then
            for n in $NAMES; do kubectl -n "$NS" delete statefulset "$n" --ignore-not-found=true; done
            yq -o=y e 'select(.kind == "StatefulSet")' /tmp/wazuh-all.yaml > /tmp/wazuh-sts.yaml
            kubectl -n "$NS" apply -f /tmp/wazuh-sts.yaml
          fi

      - name: Wait & diagnose core components
        shell: bash
        run: |
          set -e
          for sel in "app=wazuh-indexer" "app=wazuh-manager" "app=wazuh-dashboard"; do
            echo "Waiting for: $sel"
            kubectl -n "$NS" wait --for=condition=Ready pod -l "$sel" --timeout=1800s || true
            kubectl -n "$NS" get pods -l "$sel" -o wide
          done

      # === Managers: enable AUTHD (passwordless) ===
      - name: Enable authd (passwordless) on ALL managers
        env:
          MANAGER_SELECTOR: app=wazuh-manager
        shell: bash
        run: |
          set -euo pipefail
          PODS=$(kubectl -n "$NS" get pods -l "$MANAGER_SELECTOR" -o name)
          test -n "$PODS" || { echo "No manager pods found"; exit 1; }
          for POD in $PODS; do
            echo ">> Patching $POD"
            kubectl -n "$NS" exec "$POD" -c wazuh-manager -- sh -lc '
              set -e
              CONF=/var/ossec/etc/ossec.conf
              cp -f "$CONF" "${CONF}.bak.$(date +%s)" || true

              # Ensure <auth> exists and is passwordless
              if grep -q "<auth>" "$CONF"; then
                sed -i "s#<use_password>.*</use_password>#<use_password>no</use_password>#; s#<port>.*</port>#<port>1515</port>#; s#<disabled>.*</disabled>#<disabled>no</disabled>#" "$CONF"
                # Remove any <password>...</password> line inside <auth>
                awk '\''
                  BEGIN{in_auth=0}
                  /<auth>/{in_auth=1}
                  in_auth && /<password>.*<\/password>/{next}
                  /<\/auth>/{in_auth=0}
                  {print}
                '\'' "$CONF" > "$CONF.tmp" && mv "$CONF.tmp" "$CONF"
              else
                awk "/<\/ossec_config>/{print \"  <auth>\\n    <disabled>no</disabled>\\n    <port>1515</port>\\n    <use_password>no</use_password>\\n  </auth>\"; print; next} {print}" "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
              fi

              # Ensure <remote> block exists for agent events (1514/tcp)
              if grep -q "<remote>" "$CONF"; then
                sed -i "s#<connection>.*</connection>#<connection>secure</connection>#; s#<protocol>.*</protocol>#<protocol>tcp</protocol>#; s#<port>.*</port>#<port>1514</port>#" "$CONF"
              else
                awk "/<\/ossec_config>/{print \"  <remote>\\n    <connection>secure</connection>\\n    <port>1514</port>\\n    <protocol>tcp</protocol>\\n  </remote>\"; print; next} {print}" "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
              fi
            '
          done

      - name: Remove any enrollment/password secrets (not used)
        shell: bash
        run: |
          kubectl -n "$NS" delete secret wazuh-authd-pass wazuh-enroll-pass --ignore-not-found=true || true

      - name: Restart manager StatefulSets (safe)
        shell: bash
        run: |
          set -e
          for s in wazuh-manager-master wazuh-manager-worker; do
            kubectl -n "$NS" get sts "$s" >/dev/null 2>&1 || continue
            kubectl -n "$NS" rollout restart sts/"$s"
            kubectl -n "$NS" rollout status  sts/"$s" --timeout=600s || true
          done
          kubectl -n "$NS" get pods -l app=wazuh-manager -o wide

      - name: Verify managers are listening on 1515 (authd)
        shell: bash
        run: |
          set -euo pipefail
          for P in $(kubectl -n "$NS" get pod -l app=wazuh-manager -o name); do
            echo ">> Checking $P"
            kubectl -n "$NS" exec "$P" -c wazuh-manager -- sh -lc 'ss -Hntl | grep -E "LISTEN.+:1515" || netstat -tln | grep ":1515"'
          done

      - name: Ensure Services for managers
        shell: bash
        run: |
          set -euo pipefail
          cat <<'EOF' | kubectl -n "$NS" apply -f -
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh
            labels: { app: wazuh-manager }
          spec:
            type: ClusterIP
            selector: { app: wazuh-manager }
            ports:
              - { name: authd,         port: 1515, protocol: TCP, targetPort: 1515 }
              - { name: agents-events, port: 1514, protocol: TCP, targetPort: 1514 }
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh-workers
            labels: { app: wazuh-manager }
          spec:
            type: ClusterIP
            selector: { app: wazuh-manager }
            ports:
              - { name: agents-events, port: 1514, protocol: TCP, targetPort: 1514 }
              - { name: authd,         port: 1515, protocol: TCP, targetPort: 1515 }
          EOF
          kubectl -n "$NS" get svc wazuh -o wide
          kubectl -n "$NS" get endpoints wazuh -o wide || true

      # === Agent side (passwordless enrollment)
      - name: Create Agent ConfigMap (passwordless enrollment)
        shell: bash
        run: |
          set -euo pipefail
          cat > /tmp/agent-ossec.conf <<'EOF'
          <ossec_config>
            <client>
              <server>
                <address>wazuh-workers.wazuh.svc.cluster.local</address>
                <port>1514</port>
                <protocol>tcp</protocol>
              </server>
              <enrollment>
                <enabled>yes</enabled>
                <manager_address>wazuh.wazuh.svc.cluster.local</manager_address>
                <port>1515</port>
                <use_password>no</use_password>
                <ssl_verify_host>no</ssl_verify_host>
                <auto_negotiate>no</auto_negotiate>
              </enrollment>
            </client>
          </ossec_config>
          EOF
          kubectl -n "$NS" create configmap wazuh-agent-ossec \
            --from-file=ossec.conf=/tmp/agent-ossec.conf \
            -o yaml --dry-run=client | kubectl apply -f -

      - name: Deploy Agent DaemonSet (agent-auth without -P)
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NS" delete ds wazuh-agent --ignore-not-found=true
          cat <<'EOF' | kubectl -n "$NS" apply -f -
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-agent
            labels: { app: wazuh-agent }
          spec:
            selector: { matchLabels: { app: wazuh-agent } }
            updateStrategy: { type: RollingUpdate }
            template:
              metadata: { labels: { app: wazuh-agent } }
              spec:
                hostNetwork: true
                hostPID: true
                dnsPolicy: ClusterFirstWithHostNet
                terminationGracePeriodSeconds: 30
                tolerations:
                  - { key: node-role.kubernetes.io/master, operator: Exists, effect: NoSchedule }
                  - { key: node-role.kubernetes.io/control-plane, operator: Exists, effect: NoSchedule }
                containers:
                  - name: wazuh-agent
                    image: ghcr.io/saurab123456/wazuh-agent:4.12.0
                    imagePullPolicy: IfNotPresent
                    securityContext: { privileged: true, runAsUser: 0 }
                    env:
                      - name: NODE_NAME
                        valueFrom: { fieldRef: { fieldPath: spec.nodeName } }
                      - name: AUTHD_PORT
                        value: "1515"
                      - name: MANAGER_DNS
                        value: "wazuh.wazuh.svc.cluster.local"
                      - name: GROUPS
                        value: "kubernetes"
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -e
                        AGENT_NAME="${NODE_NAME}"
                        echo "Agent name: $AGENT_NAME"
                        mkdir -p /var/ossec/var/run /var/ossec/queue/sockets /var/ossec/queue/db
                        cp /config/ossec.conf /var/ossec/etc/ossec.conf 2>/dev/null || true
                        rm -f /var/ossec/var/run/*.pid /var/ossec/var/*.lock 2>/dev/null || true
                        enroll() {
                          echo "Enrolling to ${MANAGER_DNS}:${AUTHD_PORT} (group=${GROUPS})…"
                          if [ -n "${GROUPS}" ]; then
                            /var/ossec/bin/agent-auth -m "${MANAGER_DNS}" -p "${AUTHD_PORT}" -A "${AGENT_NAME}" -G "${GROUPS}"
                          else
                            /var/ossec/bin/agent-auth -m "${MANAGER_DNS}" -p "${AUTHD_PORT}" -A "${AGENT_NAME}"
                          fi
                        }
                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          for i in $(seq 1 36); do
                            if enroll; then break; fi
                            echo "Enroll attempt $i failed; retrying in 5s…"
                            sleep 5
                          done
                        fi
                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          echo "ERROR: Enrollment failed; exiting."
                          exit 1
                        fi
                        echo "Starting Wazuh agent…"
                        /var/ossec/bin/wazuh-control start
                        sleep 5
                        /var/ossec/bin/wazuh-control status
                        tail -f /var/ossec/logs/ossec.log
                    readinessProbe:
                      exec: { command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"'] }
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      failureThreshold: 6
                      timeoutSeconds: 5
                    livenessProbe:
                      exec: { command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"'] }
                      initialDelaySeconds: 60
                      periodSeconds: 30
                      failureThreshold: 3
                      timeoutSeconds: 5
                    lifecycle:
                      preStop:
                        exec: { command: ["/bin/sh","-c","/var/ossec/bin/wazuh-control stop || true"] }
                    resources:
                      requests: { cpu: "100m", memory: "256Mi" }
                      limits:   { cpu: "1000m", memory: "1024Mi" }
                    volumeMounts:
                      - { name: ossec-conf-cm,   mountPath: /config,                    readOnly: true }
                      - { name: varlogcontainers, mountPath: /host/var/log/containers,   readOnly: true }
                      - { name: varlogpods,       mountPath: /host/var/log/pods,         readOnly: true }
                      - { name: varlog,           mountPath: /host/var/log,              readOnly: true }
                volumes:
                  - { name: ossec-conf-cm,   configMap: { name: wazuh-agent-ossec } }
                  - { name: varlogcontainers, hostPath: { path: /var/log/containers, type: DirectoryOrCreate } }
                  - { name: varlogpods,       hostPath: { path: /var/log/pods,       type: DirectoryOrCreate } }
                  - { name: varlog,           hostPath: { path: /var/log,            type: Directory } }
          EOF
          kubectl -n "$NS" rollout status ds/wazuh-agent --timeout=600s || true
          kubectl -n "$NS" get pods -l app=wazuh-agent -o wide

      - name: ✅ Wait for authd endpoints & probe service:1515
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting for endpoints on service/wazuh …"
          for i in $(seq 1 60); do
            EP="$(kubectl -n "$NS" get endpoints wazuh -o jsonpath='{.subsets[*].addresses[*].ip}' 2>/dev/null || true)"
            if [ -n "$EP" ]; then echo "Endpoints: $EP"; break; fi
            sleep 5
          done
          EP="$(kubectl -n "$NS" get endpoints wazuh -o jsonpath='{.subsets[*].addresses[*].ip}' 2>/dev/null || true)"
          test -n "$EP" || { echo "::error::service/wazuh has no endpoints (check selector labels on manager pods)"; exit 1; }

          echo "Probing TCP connectivity to wazuh:1515 from an in-cluster BusyBox…"
          kubectl -n "$NS" delete pod probe-authd --ignore-not-found=true
          kubectl -n "$NS" run probe-authd --image=busybox:1.36 --restart=Never -- sh -c 'nslookup wazuh || true; for i in $(seq 1 10); do nc -vz -w 2 wazuh 1515 && exit 0; echo retry; sleep 3; done; exit 1'
          kubectl -n "$NS" wait --for=condition=Ready pod/probe-authd --timeout=60s || true
          kubectl -n "$NS" logs pod/probe-authd || true
          kubectl -n "$NS" delete pod probe-authd --ignore-not-found=true

      - name: Discover Dashboard port
        id: dash
        shell: bash
        run: |
          set -euo pipefail
          PORT="$(kubectl -n "$NS" get svc -l app=wazuh-dashboard -o jsonpath='{.items[0].spec.ports[0].port}' 2>/dev/null || true)"
          if [ -z "${PORT:-}" ]; then
            PORT="$(kubectl -n "$NS" get svc -l app=wazuh-dashboard -o jsonpath='{.items[0].spec.ports[0].targetPort}' 2>/dev/null || true)"
          fi
          if [ -z "${PORT:-}" ]; then
            PORT="$(kubectl -n "$NS" get deploy wazuh-dashboard -o jsonpath='{.spec.template.spec.containers[0].ports[0].containerPort}' 2>/dev/null || true)"
          fi
          test -n "${PORT:-}" || { echo "::error::Could not determine dashboard port"; exit 1; }
          echo "dash_port=${PORT}" >> "$GITHUB_OUTPUT"
          echo "Discovered dashboard port: ${PORT}"

      - name: Start Dashboard port-forward (auto)
        if: ${{ inputs.enable_port_forward == 'true' }}
        env:
          PF_BIND: 127.0.0.1
          PF_PORT: ${{ inputs.local_forward_port }}
        shell: bash
        run: |
          set -euo pipefail
          TARGET_PORT="${{ steps.dash.outputs.dash_port }}"
          (pkill -f "port-forward .*:${PF_PORT}:" && sleep 1) || true
          echo "Starting PF: localhost:${PF_PORT} -> deploy/wazuh-dashboard:${TARGET_PORT}"
          nohup kubectl -n "${NS}" port-forward --address "${PF_BIND}" deploy/wazuh-dashboard "${PF_PORT}:${TARGET_PORT}" > portforward.log 2>&1 &
          for i in $(seq 1 30); do
            sleep 2
            if curl -Is --connect-timeout 2 "http://localhost:${PF_PORT}" >/dev/null 2>&1 || \
               curl -kIs --connect-timeout 2 "https://localhost:${PF_PORT}" >/dev/null 2>&1; then
              break
            fi
          done
          echo "::notice title=Browse Now::Open http://localhost:${PF_PORT} (or https://localhost:${PF_PORT} if TLS is enabled)"

      - name: Final status
        shell: bash
        run: |
          kubectl -n "$NS" get svc -o wide
          kubectl -n "$NS" get endpoints wazuh -o wide || true
          kubectl -n "$NS" get pods -o wide
