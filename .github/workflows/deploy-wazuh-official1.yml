name: Deploy Wazuh Agent (Fixed Connectivity)

on:
  workflow_dispatch:

concurrency:
  group: deploy-wazuh-agent
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on:
      - self-hosted
      - linux
      - ronin
      - k8s
      - control-plane

    env:
      NS: wazuh
      IMAGE: ghcr.io/saurab123456/wazuh-agent:4.12.0

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure kubectl is available
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v kubectl >/dev/null 2>&1; then
            curl -fsSL -o /tmp/kubectl "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x /tmp/kubectl
            sudo mv /tmp/kubectl /usr/local/bin/
          fi
          kubectl version --client

      - name: Write kubeconfig from secret
        shell: bash
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        run: |
          set -euo pipefail
          if [ -z "${KUBE_CONFIG_B64:-}" ]; then
            echo "::error::Missing repo secret KUBE_CONFIG_B64"; exit 1
          fi
          mkdir -p "$HOME/.kube"
          echo "$KUBE_CONFIG_B64" | base64 -d > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          kubectl get nodes -o wide || true
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

      - name: Verify manager services and connectivity
        shell: bash
        run: |
          set -euo pipefail
          
          echo "=== Checking existing services ==="
          kubectl -n "$NS" get svc -o wide || true
          
          echo "=== Checking manager pods ==="
          kubectl -n "$NS" get pods -l app=wazuh-manager -o wide || true
          
          echo "=== Testing network connectivity ==="
          # Get manager pod IPs
          MANAGER_PODS=$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{.items[*].status.podIP}')
          echo "Manager pod IPs: $MANAGER_PODS"
          
          # Test if port 1515 is open on managers
          for pod_ip in $MANAGER_PODS; do
            echo "Testing connectivity to $pod_ip:1515..."
            if timeout 5 bash -c "echo > /dev/tcp/$pod_ip/1515" 2>/dev/null; then
              echo "✅ Port 1515 is open on $pod_ip"
            else
              echo "❌ Cannot connect to $pod_ip:1515"
            fi
          done

      - name: Create or update manager services
        shell: bash
        run: |
          set -euo pipefail
          
          # Delete existing services to avoid conflicts
          kubectl -n "$NS" delete svc wazuh wazuh-workers --ignore-not-found=true
          
          # Create proper services
          cat <<EOF | kubectl -n "$NS" apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh
            labels:
              app: wazuh-manager
              node-type: master
          spec:
            type: ClusterIP
            selector:
              app: wazuh-manager
              node-type: master
            ports:
            - name: authd
              port: 1515
              protocol: TCP
              targetPort: 1515
            - name: agents-events
              port: 1514
              protocol: TCP
              targetPort: 1514
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh-workers
            labels:
              app: wazuh-manager
              node-type: worker
          spec:
            type: ClusterIP
            selector:
              app: wazuh-manager
              node-type: worker
            ports:
            - name: agents-events
              port: 1514
              protocol: TCP
              targetPort: 1514
            - name: authd
              port: 1515
              protocol: TCP
              targetPort: 1515
          EOF
          
          echo "Services created successfully"
          kubectl -n "$NS" get svc -o wide

      - name: Configure managers for passwordless authentication
        shell: bash
        run: |
          set -euo pipefail
          
          # Get all manager pods
          MANAGER_PODS=$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{.items[*].metadata.name}')
          
          for pod in $MANAGER_PODS; do
            echo "=== Configuring $pod for passwordless auth ==="
            
            # Create a script file to execute on the manager pod
            cat > /tmp/configure_auth.sh <<'SCRIPT_EOF'
            #!/bin/bash
            set -e
            CONFIG_FILE="/var/ossec/etc/ossec.conf"
            BACKUP_FILE="/var/ossec/etc/ossec.conf.backup.$(date +%s)"
            
            # Create backup
            cp "$CONFIG_FILE" "$BACKUP_FILE"
            
            # Ensure auth section exists with passwordless config
            if grep -q "<auth>" "$CONFIG_FILE"; then
              # Update existing auth section
              sed -i '/<auth>/,/<\/auth>/ {
                s/<disabled>.*<\/disabled>/<disabled>no<\/disabled>/
                s/<port>.*<\/port>/<port>1515<\/port>/
                s/<use_password>.*<\/use_password>/<use_password>no<\/use_password>/
                /<password>.*<\/password>/d
              }' "$CONFIG_FILE"
            else
              # Add auth section
              cat >> "$CONFIG_FILE" <<'AUTH_CONFIG'
            
            <auth>
              <disabled>no</disabled>
              <port>1515</port>
              <use_password>no</use_password>
            </auth>
            
AUTH_CONFIG
            fi
            
            # Verify the configuration
            echo "=== Current auth configuration ==="
            sed -n '/<auth>/,/<\/auth>/p' "$CONFIG_FILE"
            
            # Restart wazuh-manager to apply changes
            echo "Restarting wazuh-manager..."
            supervisorctl restart wazuh-manager
SCRIPT_EOF
            
            chmod +x /tmp/configure_auth.sh
            
            # Copy and execute the script on the manager pod
            kubectl -n "$NS" cp /tmp/configure_auth.sh "$pod":/tmp/configure_auth.sh
            kubectl -n "$NS" exec "$pod" -- /tmp/configure_auth.sh || echo "Warning: Failed to configure $pod"
            
            # Clean up
            rm -f /tmp/configure_auth.sh
          done
          
          # Wait for managers to restart
          sleep 30

      - name: Verify authd is running on managers
        shell: bash
        run: |
          set -euo pipefail
          
          MANAGER_PODS=$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{.items[*].metadata.name}')
          
          for pod in $MANAGER_PODS; do
            echo "=== Checking authd on $pod ==="
            
            # Check if authd process is running
            kubectl -n "$NS" exec "$pod" -- bash -c '
              # Check authd process
              if ps aux | grep -q "[a]uthd"; then
                echo "✅ authd process is running"
              else
                echo "❌ authd process not found"
              fi
              
              # Check if port 1515 is listening
              if netstat -tln | grep -q ":1515"; then
                echo "✅ Port 1515 is listening"
              else
                echo "❌ Port 1515 not listening"
              fi
              
              # Check recent logs for authd
              echo "=== Recent authd logs ==="
              tail -n 20 /var/ossec/logs/ossec.log | grep -i authd || echo "No authd logs found"
            ' || echo "Failed to check $pod"
          done

      - name: Test service connectivity
        shell: bash
        run: |
          set -euo pipefail
          
          echo "=== Testing service connectivity ==="
          
          # Get service IPs
          WAZUH_SERVICE_IP=$(kubectl -n "$NS" get svc wazuh -o jsonpath='{.spec.clusterIP}')
          echo "Wazuh service IP: $WAZUH_SERVICE_IP"
          
          # Test connectivity to the service
          if [ -n "$WAZUH_SERVICE_IP" ]; then
            echo "Testing connectivity to service $WAZUH_SERVICE_IP:1515..."
            
            # Create a temporary test pod
            cat <<EOF | kubectl -n "$NS" apply -f -
            apiVersion: v1
            kind: Pod
            metadata:
              name: connectivity-test
            spec:
              restartPolicy: Never
              containers:
              - name: test
                image: busybox
                command: ["sh", "-c"]
                args:
                - |
                  echo "Testing connection to $WAZUH_SERVICE_IP:1515..."
                  if nc -z -w 5 $WAZUH_SERVICE_IP 1515; then
                    echo "✅ SUCCESS: Can connect to wazuh service on port 1515"
                    exit 0
                  else
                    echo "❌ FAILED: Cannot connect to wazuh service on port 1515"
                    exit 1
                  fi
            EOF
            
            # Wait for test to complete
            kubectl -n "$NS" wait --for=condition=Ready pod/connectivity-test --timeout=30s || true
            kubectl -n "$NS" logs connectivity-test
            kubectl -n "$NS" delete pod connectivity-test --ignore-not-found=true
          fi

      - name: Deploy Wazuh Agent DaemonSet
        shell: bash
        run: |
          set -euo pipefail
          
          # Delete existing daemonset if it exists
          kubectl -n "$NS" delete daemonset wazuh-agent --ignore-not-found=true
          
          # Create agent daemonset
          cat <<EOF | kubectl -n "$NS" apply -f -
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-agent
            labels:
              app: wazuh-agent
          spec:
            selector:
              matchLabels:
                app: wazuh-agent
            updateStrategy:
              type: RollingUpdate
            template:
              metadata:
                labels:
                  app: wazuh-agent
              spec:
                hostNetwork: true
                hostPID: true
                dnsPolicy: ClusterFirstWithHostNet
                terminationGracePeriodSeconds: 30
                tolerations:
                - key: node-role.kubernetes.io/master
                  operator: Exists
                  effect: NoSchedule
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
                  effect: NoSchedule
                containers:
                - name: wazuh-agent
                  image: $IMAGE
                  imagePullPolicy: IfNotPresent
                  securityContext:
                    privileged: true
                    runAsUser: 0
                  env:
                  - name: NODE_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
                  - name: MANAGER_SERVICE
                    value: "wazuh.wazuh.svc.cluster.local"
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    set -e
                    AGENT_NAME="\${NODE_NAME}"
                    echo "Agent name: \${AGENT_NAME}"
                    
                    # Prepare directories
                    mkdir -p /var/ossec/var/run /var/ossec/queue/sockets /var/ossec/queue/db
                    
                    # Clean up any existing locks/pid files
                    rm -f /var/ossec/var/run/*.pid /var/ossec/var/*.lock 2>/dev/null || true
                    
                    # Function to enroll agent
                    enroll_agent() {
                      echo "Enrolling to \${MANAGER_SERVICE}:1515..."
                      if /var/ossec/bin/agent-auth -m "\${MANAGER_SERVICE}" -p 1515 -A "\${AGENT_NAME}" -G "kubernetes"; then
                        echo "✅ Enrollment successful!"
                        return 0
                      else
                        echo "❌ Enrollment failed"
                        return 1
                      fi
                    }
                    
                    # Try to enroll (max 10 attempts)
                    if [ ! -s /var/ossec/etc/client.keys ]; then
                      for attempt in {1..20}; do
                        echo "Enrollment attempt \$attempt/20..."
                        if enroll_agent; then
                          break
                        fi
                        if [ \$attempt -eq 20 ]; then
                          echo "❌ ERROR: All enrollment attempts failed"
                          echo "=== Network diagnostics ==="
                          ping -c 3 "\${MANAGER_SERVICE}" || echo "Ping failed"
                          nslookup "\${MANAGER_SERVICE}" || echo "DNS lookup failed"
                          exit 1
                        fi
                        echo "Waiting 5 seconds before retry..."
                        sleep 5
                      done
                    fi
                    
                    # Start the agent
                    echo "Starting Wazuh agent..."
                    /var/ossec/bin/wazuh-control start
                    
                    # Wait and check status
                    sleep 3
                    /var/ossec/bin/wazuh-control status
                    
                    # Follow logs
                    tail -f /var/ossec/logs/ossec.log
                  lifecycle:
                    preStop:
                      exec:
                        command: ["/bin/sh", "-c", "/var/ossec/bin/wazuh-control stop || true"]
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "256Mi"
                    limits:
                      cpu: "1000m"
                      memory: "1024Mi"
                  volumeMounts:
                  - name: varlogcontainers
                    mountPath: /host/var/log/containers
                    readOnly: true
                  - name: varlogpods
                    mountPath: /host/var/log/pods
                    readOnly: true
                  - name: varlog
                    mountPath: /host/var/log
                    readOnly: true
                volumes:
                - name: varlogcontainers
                  hostPath:
                    path: /var/log/containers
                - name: varlogpods
                  hostPath:
                    path: /var/log/pods
                - name: varlog
                  hostPath:
                    path: /var/log
          EOF

      - name: Wait for agent rollout and check status
        shell: bash
        run: |
          set -euo pipefail
          
          echo "Waiting for agent daemonset to rollout..."
          kubectl -n "$NS" rollout status daemonset/wazuh-agent --timeout=300s || true
          
          echo "=== Agent pods status ==="
          kubectl -n "$NS" get pods -l app=wazuh-agent -o wide
          
          # Check agent logs for enrollment status
          AGENT_PODS=$(kubectl -n "$NS" get pods -l app=wazuh-agent -o jsonpath='{.items[*].metadata.name}')
          for pod in $AGENT_PODS; do
            echo "=== Enrollment status for $pod ==="
            kubectl -n "$NS" logs "$pod" | grep -E "(Enrollment|✅|❌|success|failed)" | tail -n 5 || true
          done

      - name: Verify agent registration on managers
        shell: bash
        run: |
          set -euo pipefail
          
          echo "=== Checking agent registration on managers ==="
          
          MANAGER_PODS=$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{.items[*].metadata.name}')
          
          for pod in $MANAGER_PODS; do
            echo "--- Agent list on $pod ---"
            kubectl -n "$NS" exec "$pod" -- /var/ossec/bin/agent_control -l 2>/dev/null | head -n 10 || echo "Could not get agent list from $pod"
          done

      - name: Final diagnostics
        shell: bash
        run: |
          set -euo pipefail
          
          echo "=== FINAL DIAGNOSTICS ==="
          echo "--- All pods ---"
          kubectl -n "$NS" get pods -o wide
          
          echo "--- Services ---"
          kubectl -n "$NS" get svc -o wide
          
          echo "--- Network policies (if any) ---"
          kubectl -n "$NS" get networkpolicies -o wide || true
          
          echo "=== Connectivity test results ==="
          echo "To test manually, run:"
          echo "  kubectl -n $NS run test --image=busybox --rm -it -- sh -c 'nc -zv wazuh.wazuh.svc.cluster.local 1515 && echo \"✅ Connected\" || echo \"❌ Failed\"'"

      - name: Create troubleshooting script
        shell: bash
        run: |
          set -euo pipefail
          
          cat <<'EOF' > /tmp/wazuh-troubleshoot.sh
          #!/bin/bash
          set -e
          
          NS="wazuh"
          
          echo "=== Wazuh Troubleshooting Script ==="
          
          # Check pods
          echo "--- Pods ---"
          kubectl -n "$NS" get pods -o wide
          
          # Check services
          echo "--- Services ---"
          kubectl -n "$NS" get svc -o wide
          
          # Check endpoints
          echo "--- Endpoints ---"
          kubectl -n "$NS" get endpoints -o wide
          
          # Test connectivity
          echo "--- Connectivity test ---"
          kubectl -n "$NS" run connectivity-test --image=busybox --rm -it --restart=Never -- \
            sh -c 'echo "Testing wazuh service..." && nc -zv wazuh.wazuh.svc.cluster.local 1515 && echo "✅ SUCCESS" || echo "❌ FAILED"'
          
          # Check manager logs
          echo "--- Manager authd logs ---"
          MANAGER_POD=$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
          if [ -n "$MANAGER_POD" ]; then
            kubectl -n "$NS" logs "$MANAGER_POD" | grep -i authd | tail -n 10
          fi
          
          # Check agent logs
          echo "--- Agent enrollment logs ---"
          AGENT_POD=$(kubectl -n "$NS" get pods -l app=wazuh-agent -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
          if [ -n "$AGENT_POD" ]; then
            kubectl -n "$NS" logs "$AGENT_POD" | grep -E "(Enroll|auth|connect)" | tail -n 10
          fi
          EOF
          
          chmod +x /tmp/wazuh-troubleshoot.sh
          echo "Troubleshooting script created at /tmp/wazuh-troubleshoot.sh"
