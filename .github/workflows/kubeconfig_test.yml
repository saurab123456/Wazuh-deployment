name: Ronin: Kubernetes API connectivity

on:
  workflow_dispatch: {}

jobs:
  probe:
    runs-on:
      - self-hosted
      - linux
      - X64
      - ronin
      - k8s
      - control-plane
      - vmware

    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      KCFG_NEW: ${{ secrets.KUBE_CONFIG_B64_RONIN_NEW }}
      KCFG_OLD: ${{ secrets.KUBE_CONFIG_B64 }}
      API_CANDIDATES: ${{ secrets.RONIN_API_CANDIDATES }}
      BASTION_HOST: ${{ secrets.BASTION_HOST }}
      BASTION_USER: ${{ secrets.BASTION_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      LOCAL_TUNNEL_PORT: "16443"

    steps:
      - uses: actions/checkout@v4

      - name: Ensure tools
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v kubectl >/dev/null 2>&1; then
            VER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
            curl -fsSL -o kubectl "https://dl.k8s.io/release/${VER}/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          fi
          if ! command -v yq >/dev/null 2>&1; then
            curl -fsSL -o yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            chmod +x yq && sudo mv yq /usr/local/bin/yq
          fi
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y --no-install-recommends openssh-client netcat-openbsd iptables >/dev/null 2>&1 || true

      - name: Write kubeconfig (prefer NEW secret, fallback to OLD)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${KCFG_NEW:-}" ]; then
            echo "Using KUBE_CONFIG_B64_RONIN_NEW"
            echo "$KCFG_NEW" | base64 -d > "$KUBECONFIG"
          elif [ -n "${KCFG_OLD:-}" ]; then
            echo "::warning::Using legacy KUBE_CONFIG_B64"
            echo "$KCFG_OLD" | base64 -d > "$KUBECONFIG"
          else
            echo "::error::No kubeconfig secret provided"; exit 1
          fi
          chmod 600 "$KUBECONFIG"
          API_URL="$(yq -r '.clusters[0].cluster.server' "$KUBECONFIG")"
          API_HOST="$(echo "$API_URL" | sed -E 's#^https?://([^:/]+).*#\1#')"
          API_PORT="$(echo "$API_URL" | sed -nE 's#^https?://[^:/]+:([0-9]+).*#\1#p')"
          API_PORT="${API_PORT:-6443}"
          echo "From kubeconfig -> $API_URL"
          echo "API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "API_PORT=$API_PORT" >> $GITHUB_ENV

      - name: Probe direct API
        id: direct
        shell: bash
        continue-on-error: true
        run: |
          set -e
          echo "Probing direct ${API_HOST}:${API_PORT} …"
          nc -zv -w2 "$API_HOST" "$API_PORT"

      - name: Try API candidates (if direct fails)
        if: steps.direct.outcome != 'success'
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          norm() { # -> https://host:port
            local s="$(echo "$1" | xargs)"
            [ -z "$s" ] && { echo ""; return; }
            if [[ "$s" =~ ^https?:// ]]; then echo "$s";
            elif [[ "$s" =~ :[0-9]+$ ]]; then echo "https://$s";
            else echo "https://$s:6443"; fi
          }
          CHOSEN=""
          IFS=',' read -ra ARR <<< "${API_CANDIDATES:-}"
          for raw in "${ARR[@]}"; do
            URL="$(norm "$raw")"; [ -z "$URL" ] && continue
            H="$(echo "$URL" | sed -E 's#^https?://([^:/]+).*#\1#')"
            P="$(echo "$URL" | sed -nE 's#^https?://[^:/]+:([0-9]+).*#\1#p')"; P="${P:-6443}"
            echo "Trying $H:$P …"
            if nc -zv -w2 "$H" "$P"; then
              CHOSEN="$URL"; break
            fi
          done
          if [ -n "$CHOSEN" ]; then
            echo "Found working API: $CHOSEN"
            yq -i ".clusters[].cluster.server = \"$CHOSEN\"" "$KUBECONFIG"
            echo "API_HOST=$(echo "$CHOSEN" | sed -E 's#^https?://([^:/]+).*#\1#')" >> $GITHUB_ENV
            echo "API_PORT=$(echo "$CHOSEN" | sed -nE 's#^https?://[^:/]+:([0-9]+).*#\1#p' | sed 's/^$/6443/')" >> $GITHUB_ENV
            echo "mode=direct" >> $GITHUB_OUTPUT
          else
            echo "No direct candidates worked."
            echo "mode=tunnel" >> $GITHUB_OUTPUT
          fi

      - name: Start SSH tunnel + iptables redirect (fallback; preserves TLS SAN)
        if: steps.direct.outcome != 'success' && steps.pick.outputs.mode == 'tunnel'
        shell: bash
        run: |
          set -euo pipefail
          for v in BASTION_HOST BASTION_USER SSH_PRIVATE_KEY; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Direct route failed and '$v' is missing; add tunnel secrets or fix routing"; exit 1
            fi
          done
          mkdir -p ~/.ssh
          printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -T 10 "$BASTION_HOST" >> ~/.ssh/known_hosts || true
          ssh -f -N -L "${LOCAL_TUNNEL_PORT}:${API_HOST}:${API_PORT}" \
            "${BASTION_USER}@${BASTION_HOST}" \
            -o ExitOnForwardFailure=yes -o ServerAliveInterval=30 -o ServerAliveCountMax=3
          ss -ltn | grep ":${LOCAL_TUNNEL_PORT}" || (echo "Tunnel not listening" && exit 1)
          # Redirect any connection to API_HOST:API_PORT into the local tunnel port
          sudo iptables -t nat -A OUTPUT -p tcp -d "${API_HOST}" --dport "${API_PORT}" -j REDIRECT --to-ports "${LOCAL_TUNNEL_PORT}"
          sudo iptables -t nat -S OUTPUT | grep "${API_HOST}" || true

      - name: Verify cluster connectivity
        shell: bash
        run: |
          set -e
          kubectl cluster-info
          kubectl get nodes -o wide
          kubectl get ns

      - name: Cleanup (iptables rule & tunnel)
        if: always()
        shell: bash
        run: |
          sudo iptables -t nat -D OUTPUT -p tcp -d "${API_HOST}" --dport "${API_PORT}" -j REDIRECT --to-ports "${LOCAL_TUNNEL_PORT}" || true
          pkill -f "ssh -f -N -L ${LOCAL_TUNNEL_PORT}:${API_HOST}:${API_PORT}" || true
