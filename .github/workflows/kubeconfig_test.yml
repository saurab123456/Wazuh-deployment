name: kubeconfig-test

on:
  workflow_dispatch: {}

jobs:
  probe:
    runs-on:
      - self-hosted
      - Linux
      - X64
      - ronin
      - k8s
      - control-plane
      - vmware

    env:
      API_HOST: "10.0.8.70"
      API_PORT: "6443"
      LOCAL_TUNNEL_PORT: "16443"
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      # Map secrets to env so we can validate them in bash
      BASTION_HOST: ${{ secrets.BASTION_HOST }}
      BASTION_USER: ${{ secrets.BASTION_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools (kubectl, yq, ssh, nc)
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v kubectl >/dev/null 2>&1; then
            VER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
            curl -fsSL -o kubectl "https://dl.k8s.io/release/${VER}/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          fi
          if ! command -v yq >/dev/null 2>&1; then
            curl -fsSL -o yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            chmod +x yq && sudo mv yq /usr/local/bin/yq
          fi
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y --no-install-recommends openssh-client netcat-openbsd >/dev/null 2>&1 || true

      - name: Write kubeconfig from secret
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.KUBE_CONFIG_B64 }}" ]; then
            echo "❌ Missing KUBE_CONFIG_B64"; exit 1
          fi
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > "$KUBECONFIG"
          chmod 600 "$KUBECONFIG"

      - name: Probe direct API (10.0.8.70:6443)
        id: direct
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          echo "Probing direct ${API_HOST}:${API_PORT}…"
          nc -zv -w2 "$API_HOST" "$API_PORT"

      - name: Use direct path
        if: steps.direct.outcome == 'success'
        shell: bash
        run: |
          set -euo pipefail
          echo "✅ Direct path works"
          kubectl cluster-info
          kubectl get nodes -o wide
          kubectl get ns

      # ---------- Tunnel fallback ----------
      - name: Start SSH tunnel (fallback) and patch kubeconfig
        if: steps.direct.outcome != 'success'
        shell: bash
        run: |
          set -euo pipefail
          # Validate tunnel secrets via env (no dynamic GitHub expression indexing)
          for v in BASTION_HOST BASTION_USER SSH_PRIVATE_KEY; do
            if [ -z "${!v:-}" ]; then
              echo "❌ Missing secret: $v"; exit 1
            fi
          done

          mkdir -p ~/.ssh
          printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -T 10 "$BASTION_HOST" >> ~/.ssh/known_hosts || true

          ssh -f -N \
            -L "${LOCAL_TUNNEL_PORT}:${API_HOST}:${API_PORT}" \
            "${BASTION_USER}@${BASTION_HOST}" \
            -o ExitOnForwardFailure=yes -o ServerAliveInterval=30 -o ServerAliveCountMax=3

          ss -ltn | grep ":${LOCAL_TUNNEL_PORT}" || (echo "❌ Tunnel not listening" && exit 1)

          # Patch kubeconfig to use the tunnel (CI-only: skip hostname verify)
          yq -i '
            .clusters[].cluster.server = "https://127.0.0.1:'"${LOCAL_TUNNEL_PORT}"'" |
            del(.clusters[].cluster."certificate-authority-data") |
            .clusters[].cluster."insecure-skip-tls-verify" = true
          ' "$KUBECONFIG"

      - name: Verify via tunnel
        if: steps.direct.outcome != 'success'
        shell: bash
        run: |
          set -euo pipefail
          echo "✅ Using SSH tunnel to reach ${API_HOST}:${API_PORT}"
          kubectl cluster-info
          kubectl get nodes -o wide
          kubectl get ns

      - name: Cleanup tunnel
        if: always()
        shell: bash
        run: |
          pkill -f "ssh -f -N -L ${LOCAL_TUNNEL_PORT}:${API_HOST}:${API_PORT}" || true
