name: Deploy Wazuh (auto-connect to Ronin)

on:
  workflow_dispatch:
    inputs:
      wazuh_tag:
        description: "wazuh-kubernetes repo tag (e.g., v4.12.0)"
        required: true
        default: "v4.12.0"
      overlay:
        description: "Overlay to deploy (single or production)"
        required: true
        default: "single"
      namespace:
        description: "Namespace to deploy into"
        required: true
        default: "wazuh"

jobs:
  deploy:
    runs-on:
      - self-hosted
      - linux
      - X64
      - ronin
      - k8s
      - control-plane
      - vmware
    timeout-minutes: 120

    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      NS: ${{ inputs.namespace }}
      WAZUH_K8S_TAG: ${{ inputs.wazuh_tag }}
      OVERLAY: ${{ inputs.overlay }}
      # map secrets to env so we can handle them in bash
      KCFG_NEW: ${{ secrets.KUBE_CONFIG_B64_RONIN_NEW }}
      KCFG_OLD: ${{ secrets.KUBE_CONFIG_B64 }}
      API_CANDIDATES: ${{ secrets.RONIN_API_CANDIDATES }}
      BASTION_HOST: ${{ secrets.BASTION_HOST }}
      BASTION_USER: ${{ secrets.BASTION_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure tools (kubectl, yq, ssh, nc)
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v kubectl >/dev/null 2>&1; then
            VER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
            curl -fsSL -o kubectl "https://dl.k8s.io/release/${VER}/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          fi
          if ! command -v yq >/dev/null 2>&1; then
            curl -fsSL -o yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            chmod +x yq && sudo mv yq /usr/local/bin/yq
          fi
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y --no-install-recommends openssh-client netcat-openbsd >/dev/null 2>&1 || true
          kubectl version --client=true | head -n1
          yq --version

      - name: Write kubeconfig (prefer NEW secret, fallback to OLD)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${KCFG_NEW:-}" ]; then
            echo "Using KUBE_CONFIG_B64_RONIN_NEW"
            echo "$KCFG_NEW" | base64 -d > "$KUBECONFIG"
          elif [ -n "${KCFG_OLD:-}" ]; then
            echo "::warning::Using legacy KUBE_CONFIG_B64 (update to ..._RONIN_NEW when you can)"
            echo "$KCFG_OLD" | base64 -d > "$KUBECONFIG"
          else
            echo "::error::No kubeconfig secret provided"; exit 1
          fi
          chmod 600 "$KUBECONFIG"
          API_URL="$(yq -r '.clusters[0].cluster.server' "$KUBECONFIG")"
          API_HOST="$(echo "$API_URL" | sed -E 's#^https?://([^:/]+).*#\1#')"
          API_PORT="$(echo "$API_URL" | sed -nE 's#^https?://[^:/]+:([0-9]+).*#\1#p')"
          API_PORT="${API_PORT:-6443}"
          echo "API_URL (from kubeconfig): $API_URL"
          echo "API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "API_PORT=$API_PORT" >> $GITHUB_ENV

      - name: Probe direct API
        id: direct
        shell: bash
        continue-on-error: true
        run: |
          set -e
          echo "Probing direct ${API_HOST}:${API_PORT} …"
          nc -zv -w2 "$API_HOST" "$API_PORT"

      - name: Try API candidates (if direct fails)
        if: steps.direct.outcome != 'success'
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          CHOSEN=""
          # normalize candidates into "https://host:port" form
          norm() {
            local s="$1"
            s="$(echo "$s" | xargs)"               # trim
            if [[ -z "$s" ]]; then echo ""; return; fi
            if [[ "$s" =~ ^https?:// ]]; then
              echo "$s"
            elif [[ "$s" =~ :[0-9]+$ ]]; then
              echo "https://$s"
            else
              echo "https://$s:6443"
            fi
          }
          if [ -n "${API_CANDIDATES:-}" ]; then
            IFS=',' read -ra ARR <<< "$API_CANDIDATES"
            for raw in "${ARR[@]}"; do
              URL="$(norm "$raw")"
              [ -n "$URL" ] || continue
              H="$(echo "$URL" | sed -E 's#^https?://([^:/]+).*#\1#')"
              P="$(echo "$URL" | sed -nE 's#^https?://[^:/]+:([0-9]+).*#\1#p')"; P="${P:-6443}"
              echo "Trying ${H}:${P} …"
              if nc -zv -w2 "$H" "$P"; then
                CHOSEN="$URL"; break
              fi
            done
          fi
          if [ -n "$CHOSEN" ]; then
            echo "Found working API: $CHOSEN"
            yq -i ".clusters[].cluster.server = \"$CHOSEN\"" "$KUBECONFIG"
            echo "API_HOST=$(echo "$CHOSEN" | sed -E 's#^https?://([^:/]+).*#\1#')" >> $GITHUB_ENV
            echo "API_PORT=$(echo "$CHOSEN" | sed -nE 's#^https?://[^:/]+:([0-9]+).*#\1#p' | sed 's/^$/6443/')" >> $GITHUB_ENV
            echo "mode=direct" >> $GITHUB_OUTPUT
          else
            echo "No direct candidates worked."
            echo "mode=tunnel" >> $GITHUB_OUTPUT
          fi

      - name: Start SSH tunnel fallback (and patch kubeconfig)
        if: steps.direct.outcome != 'success' && steps.pick.outputs.mode == 'tunnel'
        shell: bash
        run: |
          set -euo pipefail
          for v in BASTION_HOST BASTION_USER SSH_PRIVATE_KEY; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Direct route failed; missing tunnel secret: $v"; exit 1
            fi
          done
          mkdir -p ~/.ssh
          printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -T 10 "$BASTION_HOST" >> ~/.ssh/known_hosts || true
          # Tunnel 127.0.0.1:16443 -> ${API_HOST}:${API_PORT} (from kubeconfig)
          ssh -f -N -L "16443:${API_HOST}:${API_PORT}" "${BASTION_USER}@${BASTION_HOST}" \
            -o ExitOnForwardFailure=yes -o ServerAliveInterval=30 -o ServerAliveCountMax=3
          ss -ltn | grep ':16443' || (echo "Tunnel not listening" && exit 1)
          # Point kubeconfig at the tunnel, TLS skip only for CI tunnel
          yq -i '
            .clusters[].cluster.server = "https://127.0.0.1:16443" |
            del(.clusters[].cluster."certificate-authority-data") |
            .clusters[].cluster."insecure-skip-tls-verify" = true
          ' "$KUBECONFIG"

      - name: Verify cluster connectivity
        shell: bash
        run: |
          set -e
          kubectl cluster-info
          kubectl get nodes -o wide
          kubectl get ns

      - name: Ensure namespace
        shell: bash
        run: |
          kubectl create namespace "$NS" --dry-run=client -o yaml | kubectl apply -f -

      # ====== Minimal official Wazuh deploy ======
      - name: Fetch wazuh-kubernetes repo
        shell: bash
        run: |
          set -e
          rm -rf wazuh-kubernetes
          git clone --depth 1 --branch "$WAZUH_K8S_TAG" https://github.com/wazuh/wazuh-kubernetes.git

      - name: Build overlay with kustomize
        shell: bash
        run: |
          set -e
          ROOT="wazuh-kubernetes/wazuh/${OVERLAY}"
          if [ ! -d "$ROOT" ]; then
            echo "::error::Overlay '$OVERLAY' not found under $ROOT_BASE"; exit 1
          fi
          kubectl kustomize "$ROOT" > /tmp/wazuh.yaml
          echo "Rendered manifest at /tmp/wazuh.yaml ($(wc -l < /tmp/wazuh.yaml) lines)"

      - name: Apply manifests
        shell: bash
        run: |
          set -e
          kubectl -n "$NS" apply -f /tmp/wazuh.yaml
          kubectl -n "$NS" get all
          kubectl -n "$NS" get pvc
          kubectl -n "$NS" get pods -o wide

      - name: Cleanup tunnel
        if: always()
        shell: bash
        run: |
          pkill -f "ssh -f -N -L 16443:${API_HOST}:${API_PORT}" || true
