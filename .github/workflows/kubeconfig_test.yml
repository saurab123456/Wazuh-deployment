name: kubeconfig-test

on:
  workflow_dispatch: {}

jobs:
  probe:
    runs-on:
      - self-hosted
      - Linux
      - X64
      - ronin
      - k8s
      - control-plane
      - vmware

    env:
      API_HOST: "10.0.8.70"
      API_PORT: "6443"
      LOCAL_TUNNEL_PORT: "16443"
      KUBECONFIG: "${{ github.workspace }}/kubeconfig.yaml"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v kubectl >/dev/null 2>&1; then
            VER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
            curl -fsSL -o kubectl "https://dl.k8s.io/release/${VER}/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          fi
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y --no-install-recommends openssh-client netcat-openbsd >/dev/null 2>&1 || true

      - name: Write kubeconfig
        shell: bash
        run: |
          set -euo pipefail
          test -n "${{ secrets.KUBE_CONFIG_B64 }}"
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > "$KUBECONFIG"
          chmod 600 "$KUBECONFIG"

      - name: Probe direct API
        id: direct
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          nc -zv -w2 "$API_HOST" "$API_PORT"
          curl -sk --connect-timeout 2 "https://${API_HOST}:${API_PORT}/healthz" || true

      # If direct failed, set up SSH tunnel and point kubeconfig at it (TLS skip only for CI tunnel)
      - name: Start tunnel if needed
        if: steps.direct.outcome != 'success'
        shell: bash
        run: |
          set -euo pipefail
          for v in BASTION_HOST BASTION_USER SSH_PRIVATE_KEY; do
            test -n "${{ secrets[v] }}" || { echo "Missing secret: $v"; exit 1; }
          done
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -T 10 "${{ secrets.BASTION_HOST }}" >> ~/.ssh/known_hosts || true
          ssh -f -N -L "${LOCAL_TUNNEL_PORT}:${API_HOST}:${API_PORT}" \
            "${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }}" \
            -o ExitOnForwardFailure=yes -o ServerAliveInterval=30 -o ServerAliveCountMax=3
          # Patch kubeconfig to use tunnel
          python3 - <<'PY'
import os, yaml
p=os.environ["KUBECONFIG"]; port=os.environ["LOCAL_TUNNEL_PORT"]
cfg=yaml.safe_load(open(p))
for c in cfg["clusters"]:
    c["cluster"]["server"]=f"https://127.0.0.1:{port}"
    c["cluster"].pop("certificate-authority-data", None)
    c["cluster"]["insecure-skip-tls-verify"]=True
yaml.safe_dump(cfg, open(p,"w"))
PY

      - name: kubectl sanity
        shell: bash
        run: |
          set -euo pipefail
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Cleanup tunnel
        if: always()
        shell: bash
        run: |
          pkill -f "ssh -f -N -L ${LOCAL_TUNNEL_PORT}:${API_HOST}:${API_PORT}" || true
