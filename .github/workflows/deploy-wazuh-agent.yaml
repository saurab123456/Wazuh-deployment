name: Deploy Wazuh Agent (manual)

on:
  workflow_dispatch:

concurrency:
  group: deploy-wazuh-agent
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on:
      - self-hosted
      - linux
      - ronin
      - k8s
      - control-plane

    env:
      NS: wazuh
      IMAGE: ghcr.io/saurab123456/wazuh-agent:4.12.0
      AUTHD_PORT: "1515"   # manager authd
      EVENTS_PORT: "1514"  # remoted/events on workers

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure kubectl is available (no sudo)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          if ! command -v kubectl >/dev/null 2>&1; then
            curl -fsSL -o "$HOME/.local/bin/kubectl" "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x "$HOME/.local/bin/kubectl"
          fi
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          kubectl version --client --output=yaml

      - name: Write kubeconfig from secret
        shell: bash
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        run: |
          set -euo pipefail
          if [ -z "${KUBE_CONFIG_B64:-}" ]; then
            echo "::error::Missing repo secret KUBE_CONFIG_B64"; exit 1
          fi
          mkdir -p "$HOME/.kube"
          echo "$KUBE_CONFIG_B64" | base64 -d > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          echo "Context: $(kubectl config current-context || true)"
          kubectl get nodes -o wide || true
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

      - name: Wait for manager (master) to be Ready
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..120}; do
            MPOD="$(kubectl -n "$NS" get pod -l app=wazuh-manager,node-type=master -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
            if [ -n "$MPOD" ]; then
              kubectl -n "$NS" wait --for=condition=Ready "pod/$MPOD" --timeout=20s && break || true
            fi
            sleep 2
          done
          if [ -z "${MPOD:-}" ]; then
            echo "::error::No wazuh-manager master pod found in ns $NS"
            kubectl -n "$NS" get pods -l app=wazuh-manager || true
            exit 1
          fi
          echo "MASTER_POD=$MPOD" >> "$GITHUB_ENV"
          echo "Found master pod: $MPOD"
          WPOD="$(kubectl -n "$NS" get pod -l app=wazuh-manager,node-type=worker -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
          if [ -n "$WPOD" ]; then
            echo "WORKER_POD=$WPOD" >> "$GITHUB_ENV"
            echo "Found worker pod: $WPOD"
          fi

      - name: Patch manager config (passwordless authd 1515 + remoted 1514)
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NS" exec "$MASTER_POD" -- sh -lc 'cat >/tmp/fix_manager.sh <<'\''EOS'\''
          set -e
          CONF=/var/ossec/etc/ossec.conf
          cp -f "$CONF" "${CONF}.bak.$(date +%s)"

          # Ensure <auth> exists, set port=1515 and use_password=no, force times to 0s
          if ! grep -q "<auth>" "$CONF"; then
            awk "/<\/ossec_config>/{print \"  <auth>\\n    <disabled>no</disabled>\\n    <port>1515</port>\\n    <use_source_ip>no</use_source_ip>\\n    <force>\\n      <enabled>yes</enabled>\\n      <key_mismatch>yes</key_mismatch>\\n      <disconnected_time enabled=\\\"yes\\\">0s</disconnected_time>\\n      <after_registration_time>0s</after_registration_time>\\n    </force>\\n    <purge>no</purge>\\n    <use_password>no</use_password>\\n    <ssl_verify_host>no</ssl_verify_host>\\n    <ssl_auto_negotiate>yes</ssl_auto_negotiate>\\n  </auth>\"; print; next} {print}" "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
          fi
          sed -i "/<auth>/,/<\\/auth>/ s#<port>.*</port>#<port>1515</port>#" "$CONF"
          if grep -q "<use_password>" "$CONF"; then
            sed -i "s#<use_password>.*</use_password>#<use_password>no</use_password>#g" "$CONF"
          else
            awk "/<auth>/{print;ins=1;next} ins && /<\\/auth>/{print \"    <use_password>no</use_password>\"; print; ins=0; next} {print}" "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
          fi
          # force block values (0s)
          if grep -q "<force>" "$CONF"; then
            sed -i "/<force>/,/<\\/force>/ s#<enabled>.*</enabled>#<enabled>yes</enabled>#" "$CONF"
            sed -i "/<force>/,/<\\/force>/ s#<key_mismatch>.*</key_mismatch>#<key_mismatch>yes</key_mismatch>#" "$CONF"
            if grep -q "<disconnected_time" "$CONF"; then
              sed -i "0,/<disconnected_time/{s#<disconnected_time[^>]*>.*</disconnected_time>#<disconnected_time enabled=\\\"yes\\\">0s</disconnected_time>#}" "$CONF"
            else
              awk "/<force>/{print;ins=1;next} ins && /<\\/force>/{print \"      <disconnected_time enabled=\\\"yes\\\">0s</disconnected_time>\"; print; ins=0; next} {print}" "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
            fi
            if grep -q "<after_registration_time>" "$CONF"; then
              sed -i "0,/<after_registration_time>/{s#<after_registration_time>.*</after_registration_time>#<after_registration_time>0s</after_registration_time>#}" "$CONF"
            else
              awk "/<force>/{print;ins=1;next} ins && /<\\/force>/{print \"      <after_registration_time>0s</after_registration_time>\"; print; ins=0; next} {print}" "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
            fi
          fi

          # Ensure <remote> exists and is secure/tcp/1514
          if ! grep -q "<remote>" "$CONF"; then
            awk "/<\/ossec_config>/{print \"  <remote>\\n    <connection>secure</connection>\\n    <port>1514</port>\\n    <protocol>tcp</protocol>\\n    <queue_size>131072</queue_size>\\n  </remote>\"; print; next} {print}" "$CONF" > "$CONF.new" && mv "$CONF.new" "$CONF"
          else
            sed -i "/<remote>/,/<\\/remote>/ s#<connection>.*</connection>#<connection>secure</connection>#" "$CONF"
            sed -i "/<remote>/,/<\\/remote>/ s#<port>.*</port>#<port>1514</port>#" "$CONF"
            sed -i "/<remote>/,/<\\/remote>/ s#<protocol>.*</protocol>#<protocol>tcp</protocol>#" "$CONF"
          fi

          /var/ossec/bin/wazuh-control restart || true
          EOS
          sh /tmp/fix_manager.sh
          kubectl -n "$NS" logs "$MASTER_POD" --tail=200 | egrep -i "Accepting connections on port 1515|Listening on port 1514/TCP" || true

      - name: Ensure shared group 'kubernetes' and permissions
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NS" exec "$MASTER_POD" -- sh -lc 'cat >/tmp/fix_group.sh <<'\''EOS'\''
          set -e
          d=/var/ossec/etc/shared/kubernetes
          [ -d "$d" ] || mkdir -p "$d"
          [ -s "$d/agent.conf" ] || echo "<ossec_config></ossec_config>" > "$d/agent.conf"
          chown -R wazuh:wazuh /var/ossec/etc/shared
          find /var/ossec/etc/shared -type d -exec chmod 750 {} \;
          find /var/ossec/etc/shared -type f -exec chmod 640 {} \;
          EOS
          sh /tmp/fix_group.sh

      - name: Wait for manager to expose ports (1515 authd, 1514 remoted)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..60}; do
            L="$(kubectl -n "$NS" logs "$MASTER_POD" --tail=300 || true)"
            echo "$L" | grep -q "Accepting connections on port 1515" && \
            echo "$L" | grep -q "Listening on port 1514/TCP" && { echo "Manager ports OK"; break; }
            sleep 2
          done

      - name: Apply Services, ConfigMap, and DaemonSet
        shell: bash
        run: |
          set -euo pipefail
          cat <<EOF | kubectl -n "$NS" apply -f -
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh
            labels:
              app: wazuh-manager
              node-type: master
          spec:
            type: ClusterIP
            selector:
              app: wazuh-manager
              node-type: master
            ports:
              - name: authd
                port: 1515
                protocol: TCP
                targetPort: 1515
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh-workers
            labels:
              app: wazuh-manager
              node-type: worker
          spec:
            type: ClusterIP
            selector:
              app: wazuh-manager
              node-type: worker
            ports:
              - name: agents-events
                port: 1514
                protocol: TCP
                targetPort: 1514
              - name: authd
                port: 1515
                protocol: TCP
                targetPort: 1515
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: wazuh-agent-ossec
          data:
            ossec.conf: |
              <ossec_config>
                <client>
                  <server>
                    <address>wazuh-workers.wazuh.svc.cluster.local</address>
                    <port>1514</port>
                    <protocol>tcp</protocol>
                  </server>
                </client>
                <localfile>
                  <location>/host/var/log/containers/*.log</location>
                  <log_format>syslog</log_format>
                  <only-future-events>yes</only-future-events>
                </localfile>
                <localfile>
                  <location>/host/var/log/pods/*/*/*.log</location>
                  <log_format>syslog</log_format>
                  <only-future-events>yes</only-future-events>
                </localfile>
                <localfile>
                  <location>/host/var/log/syslog</location>
                  <log_format>syslog</log_format>
                  <only-future-events>yes</only-future-events>
                </localfile>
              </ossec_config>
          ---
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-agent
            labels:
              app: wazuh-agent
          spec:
            selector:
              matchLabels:
                app: wazuh-agent
            updateStrategy:
              type: RollingUpdate
            template:
              metadata:
                labels:
                  app: wazuh-agent
              spec:
                hostNetwork: true
                hostPID: true
                dnsPolicy: ClusterFirstWithHostNet
                terminationGracePeriodSeconds: 30
                tolerations:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
                    effect: NoSchedule
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
                    effect: NoSchedule
                containers:
                  - name: wazuh-agent
                    image: ${IMAGE}
                    imagePullPolicy: IfNotPresent
                    securityContext:
                      privileged: true
                      runAsUser: 0
                    env:
                      - name: NODE_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: spec.nodeName
                      - name: AUTHD_PORT
                        value: "${AUTHD_PORT}"
                      - name: MANAGER_DNS
                        value: "wazuh.wazuh.svc.cluster.local"
                      - name: GROUPS
                        value: "kubernetes"
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -e
                        AGENT_NAME="$NODE_NAME"
                        echo "Agent name: $AGENT_NAME"
                        mkdir -p /var/ossec/var/run /var/ossec/queue/sockets /var/ossec/queue/db
                        cp /config/ossec.conf /var/ossec/etc/ossec.conf
                        rm -f /var/ossec/var/run/*.pid /var/ossec/var/*.lock 2>/dev/null || true
                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          echo "Enrolling to $MANAGER_DNS:$AUTHD_PORT (group=$GROUPS)…"
                          /var/ossec/bin/agent-auth -m "$MANAGER_DNS" -p "$AUTHD_PORT" -A "$AGENT_NAME" -G "$GROUPS" || true
                        fi
                        /var/ossec/bin/wazuh-control start
                        sleep 5
                        if /var/ossec/bin/wazuh-control status | grep -q "is running"; then
                          tail -f /var/ossec/logs/ossec.log
                        else
                          /var/ossec/bin/wazuh-control status || true
                          exit 1
                        fi
                    readinessProbe:
                      exec:
                        command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"']
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      failureThreshold: 6
                      timeoutSeconds: 5
                    livenessProbe:
                      exec:
                        command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"']
                      initialDelaySeconds: 60
                      periodSeconds: 30
                      failureThreshold: 3
                      timeoutSeconds: 5
                    lifecycle:
                      preStop:
                        exec:
                          command: ["/bin/sh","-c","/var/ossec/bin/wazuh-control stop || true"]
                    resources:
                      requests:
                        cpu: "100m"
                        memory: "256Mi"
                      limits:
                        cpu: "1000m"
                        memory: "1024Mi"
                    volumeMounts:
                      - name: ossec-conf-cm
                        mountPath: /config
                        readOnly: true
                      - name: varlogcontainers
                        mountPath: /host/var/log/containers
                        readOnly: true
                      - name: varlogpods
                        mountPath: /host/var/log/pods
                        readOnly: true
                      - name: varlog
                        mountPath: /host/var/log
                        readOnly: true
                volumes:
                  - name: ossec-conf-cm
                    configMap:
                      name: wazuh-agent-ossec
                  - name: varlogcontainers
                    hostPath:
                      path: /var/log/containers
                      type: DirectoryOrCreate
                  - name: varlogpods
                    hostPath:
                      path: /var/log/pods
                      type: DirectoryOrCreate
                  - name: varlog
                    hostPath:
                      path: /var/log
                      type: Directory
          EOF

          kubectl -n "$NS" rollout status ds/wazuh-agent --timeout=300s || true
          kubectl -n "$NS" get pods -l app=wazuh-agent -o wide || true

      - name: Self-heal re-enroll (only if manager lists none)
        shell: bash
        run: |
          set -euo pipefail
          count_agents() {
            kubectl -n "$NS" exec "$MASTER_POD" -- sh -lc "/var/ossec/bin/agent_control -lc | grep -E '^[[:space:]]*ID:' | grep -v '(server)' | wc -l" 2>/dev/null || echo 0
          }
          BEFORE="$(count_agents)"
          echo "Agents on manager BEFORE: $BEFORE"
          if [ "$BEFORE" -eq 0 ]; then
            for P in $(kubectl -n "$NS" get pods -l app=wazuh-agent -o name); do
              echo "=== Re-enrolling $P ==="
              kubectl -n "$NS" exec "$P" -- sh -lc '
                set -e
                rm -f /var/ossec/etc/agent.id /var/ossec/etc/client.keys
                AN="$(cat /etc/hostname || echo node)"
                /var/ossec/bin/agent-auth -m wazuh.wazuh.svc.cluster.local -p 1515 -A "$AN" -G kubernetes || true
                /var/ossec/bin/wazuh-control restart || true
              ' || true
            done
            sleep 15
          fi
          AFTER="$(count_agents)"
          echo "Agents on manager AFTER:  $AFTER"
          kubectl -n "$NS" exec "$MASTER_POD" -- /var/ossec/bin/agent_control -lc || true

      - name: Final diagnostics
        shell: bash
        run: |
          set -euo pipefail
          echo "Pods:"
          kubectl -n "$NS" get pods -o wide || true
          echo
          echo "Services:"
          kubectl -n "$NS" get svc wazuh wazuh-workers -o wide || true
          echo
          echo "Manager ports (expect 1515 authd + 1514 remoted):"
          kubectl -n "$NS" logs "$MASTER_POD" --tail=300 \
            | egrep -i "Accepting connections on port 1515|Listening on port 1514/TCP" \
            | tail -n 80 || true
          echo
          echo "Agent connection logs:"
          for P in $(kubectl -n "$NS" get pods -l app=wazuh-agent -o name); do
            echo "=== $P ==="
            kubectl -n "$NS" logs "$P" --tail=300 \
              | egrep -i "Valid key|Reading authentication keys|Trying to connect|Connected to server|keep alive" \
              | tail -n 60 || true
          done
