name: Deploy Wazuh Agent (manual)

on:
  workflow_dispatch:

concurrency:
  group: deploy-wazuh-agent
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on:
      - self-hosted
      - linux
      - ronin
      - k8s
      - control-plane

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install kubectl to a writable PATH (no sudo)
      - name: Ensure kubectl is available (no sudo)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          if ! command -v kubectl >/dev/null 2>&1; then
            curl -fsSL -o "$HOME/.local/bin/kubectl" "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x "$HOME/.local/bin/kubectl"
          fi
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          kubectl version --client --output=yaml

      - name: Write kubeconfig from secret
        shell: bash
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        run: |
          set -euo pipefail
          if [ -z "${KUBE_CONFIG_B64:-}" ]; then
            echo "::error::Missing repo secret KUBE_CONFIG_B64"; exit 1
          fi
          mkdir -p "$HOME/.kube"
          echo "$KUBE_CONFIG_B64" | base64 -d > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          echo "Context: $(kubectl config current-context || true)"
          kubectl get nodes -o wide || true

      # Make sure the Wazuh manager master pod exists & is Ready
      - name: Wait for Wazuh manager (master) to be Ready
        shell: bash
        run: |
          set -euo pipefail
          NS="wazuh"
          # best-effort: wait until a master-labeled pod is Ready
          for i in {1..60}; do
            POD="$(kubectl -n "$NS" get pod -l app=wazuh-manager,node-type=master -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
            if [ -n "$POD" ]; then
              kubectl -n "$NS" wait --for=condition=Ready "pod/$POD" --timeout=60s && break
            fi
            sleep 2
          done
          [ -n "${POD:-}" ] || { echo "::error::No wazuh-manager master pod found"; kubectl -n "$NS" get pods -l app=wazuh-manager || true; exit 1; }
          echo "MASTER_POD=$POD" >> "$GITHUB_ENV"
          echo "NS=$NS" >> "$GITHUB_ENV"
          echo "Master pod: $POD"

      # Ensure the "kubernetes" group exists on the manager (fixes: Invalid group: kubernetes)
      - name: Ensure 'kubernetes' group on manager
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NS" exec "$MASTER_POD" -- sh -lc '
            set -e
            d=/var/ossec/etc/shared/kubernetes
            [ -d "$d" ] || mkdir -p "$d"
            [ -s "$d/agent.conf" ] || echo "<ossec_config></ossec_config>" > "$d/agent.conf"
            # show shared groups present
            ls -1 /var/ossec/etc/shared || true
          '

      - name: Apply Services, ConfigMap, and DaemonSet
        shell: bash
        run: |
          set -euo pipefail
          NS="${NS:-wazuh}"
          IMAGE="ghcr.io/saurab123456/wazuh-agent:4.12.0"
          AUTHD_PORT="1515"

          echo "==> Ensure namespace"
          kubectl get ns "${NS}" >/dev/null 2>&1 || kubectl create ns "${NS}"

          echo "==> Apply resources"
          # Unquoted heredoc to allow ${IMAGE} to expand on the runner;
          # $ inside the container script is escaped with \$
          cat <<YAML | kubectl -n "${NS}" apply -f -
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh
            labels: { app: wazuh-manager, node-type: master }
          spec:
            type: ClusterIP
            selector: { app: wazuh-manager, node-type: master }
            ports:
              - { name: authd, port: 1515, protocol: TCP, targetPort: 1515 }
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wazuh-workers
            labels: { app: wazuh-manager, node-type: worker }
          spec:
            type: ClusterIP
            selector: { app: wazuh-manager, node-type: worker }
            ports:
              - { name: agents-events, port: 1514, protocol: TCP, targetPort: 1514 }
              - { name: authd,         port: 1515, protocol: TCP, targetPort: 1515 }
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: wazuh-agent-ossec
          data:
            ossec.conf: |
              <ossec_config>
                <client>
                  <server>
                    <!-- Send events to workers (1514/tcp) -->
                    <address>wazuh-workers.wazuh.svc.cluster.local</address>
                    <port>1514</port>
                    <protocol>tcp</protocol>
                  </server>
                </client>

                <!-- Container runtime logs -->
                <localfile>
                  <location>/host/var/log/containers/*.log</location>
                  <log_format>syslog</log_format>
                  <only-future-events>yes</only-future-events>
                </localfile>

                <!-- Pod logs -->
                <localfile>
                  <location>/host/var/log/pods/*/*/*.log</location>
                  <log_format>syslog</log_format>
                  <only-future-events>yes</only-future-events>
                </localfile>

                <!-- Optional node syslog -->
                <localfile>
                  <location>/host/var/log/syslog</location>
                  <log_format>syslog</log_format>
                  <only-future-events>yes</only-future-events>
                </localfile>
              </ossec_config>
          ---
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: wazuh-agent
            labels: { app: wazuh-agent }
          spec:
            selector: { matchLabels: { app: wazuh-agent } }
            updateStrategy: { type: RollingUpdate }
            template:
              metadata:
                labels: { app: wazuh-agent }
              spec:
                hostNetwork: true
                hostPID: true
                dnsPolicy: ClusterFirstWithHostNet
                terminationGracePeriodSeconds: 30
                tolerations:
                  - { key: node-role.kubernetes.io/master, operator: Exists, effect: NoSchedule }
                  - { key: node-role.kubernetes.io/control-plane, operator: Exists, effect: NoSchedule }
                containers:
                  - name: wazuh-agent
                    image: ${IMAGE}
                    imagePullPolicy: IfNotPresent
                    securityContext: { privileged: true, runAsUser: 0 }
                    env:
                      - name: NODE_NAME
                        valueFrom: { fieldRef: { fieldPath: spec.nodeName } }
                      - name: AUTHD_PORT
                        value: "${AUTHD_PORT}"
                      - name: MANAGER_DNS
                        value: "wazuh.wazuh.svc.cluster.local"   # enroll to MASTER (1515)
                      - name: GROUPS
                        value: "kubernetes"                       # now guaranteed to exist
                    command: ["/bin/sh","-c"]
                    args:
                      - |
                        set -e
                        # Stable identity = node name (prevents duplicate-name churn)
                        AGENT_NAME="\$NODE_NAME"
                        echo "Agent name: \$AGENT_NAME"

                        mkdir -p /var/ossec/var/run /var/ossec/queue/sockets /var/ossec/queue/db
                        cp /config/ossec.conf /var/ossec/etc/ossec.conf
                        rm -f /var/ossec/var/run/*.pid /var/ossec/var/*.lock 2>/dev/null || true

                        # Enroll only if not already enrolled
                        if [ ! -s /var/ossec/etc/client.keys ]; then
                          echo "Enrolling to \$MANAGER_DNS:\$AUTHD_PORT (group=\$GROUPS)…"
                          if [ -n "\$GROUPS" ]; then
                            /var/ossec/bin/agent-auth -m "\$MANAGER_DNS" -p "\$AUTHD_PORT" -A "\$AGENT_NAME" -G "\$GROUPS" || true
                          else
                            /var/ossec/bin/agent-auth -m "\$MANAGER_DNS" -p "\$AUTHD_PORT" -A "\$AGENT_NAME" || true
                          fi
                        fi

                        echo "Starting Wazuh agent…"
                        /var/ossec/bin/wazuh-control start
                        sleep 5
                        if /var/ossec/bin/wazuh-control status | grep -q "is running"; then
                          tail -f /var/ossec/logs/ossec.log
                        else
                          /var/ossec/bin/wazuh-control status || true
                          exit 1
                        fi
                    readinessProbe:
                      exec:
                        command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"']
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      failureThreshold: 6
                      timeoutSeconds: 5
                    livenessProbe:
                      exec:
                        command: ["/bin/sh","-c",'/var/ossec/bin/wazuh-control status | grep -q "is running"']
                      initialDelaySeconds: 60
                      periodSeconds: 30
                      failureThreshold: 3
                      timeoutSeconds: 5
                    lifecycle:
                      preStop:
                        exec:
                          command: ["/bin/sh","-c","/var/ossec/bin/wazuh-control stop || true"]
                    resources:
                      requests: { cpu: "100m", memory: "256Mi" }
                      limits:   { cpu: "1000m", memory: "1024Mi" }
                    volumeMounts:
                      - { name: ossec-conf-cm, mountPath: /config, readOnly: true }
                      - { name: varlogcontainers, mountPath: /host/var/log/containers, readOnly: true }
                      - { name: varlogpods,       mountPath: /host/var/log/pods,       readOnly: true }
                      - { name: varlog,           mountPath: /host/var/log,            readOnly: true }
                volumes:
                  - name: ossec-conf-cm
                    configMap: { name: wazuh-agent-ossec }
                  - name: varlogcontainers
                    hostPath: { path: /var/log/containers, type: DirectoryOrCreate }
                  - name: varlogpods
                    hostPath: { path: /var/log/pods,       type: DirectoryOrCreate }
                  - name: varlog
                    hostPath: { path: /var/log,            type: Directory }
          YAML

          echo "==> Wait for DaemonSet rollout"
          kubectl -n "${NS}" rollout status ds/wazuh-agent --timeout=300s || true

      - name: Post-deploy checks
        shell: bash
        run: |
          set -euo pipefail
          NS="${NS:-wazuh}"
          echo "Pods:"
          kubectl -n "$NS" get pods -o wide
          echo
          echo "Services:"
          kubectl -n "$NS" get svc wazuh wazuh-workers -o wide || true
          echo
          echo "Agents on manager:"
          kubectl -n "$NS" exec "$MASTER_POD" -- /var/ossec/bin/agent_control -lc || true
