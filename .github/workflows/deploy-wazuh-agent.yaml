name: Deploy Wazuh Agent (manual)

on:
  workflow_dispatch:

concurrency:
  group: deploy-wazuh-agent
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on:
      - self-hosted
      - linux
      - ronin
      - k8s
      - control-plane

    env:
      NS: wazuh
      IMAGE: ghcr.io/saurab123456/wazuh-agent:4.12.0
      AUTHD_PORT: "1515"     # manager authd (registration)
      EVENTS_PORT: "1514"    # remoted/events

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure kubectl is available (no sudo)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          if ! command -v kubectl >/dev/null 2>&1; then
            curl -fsSL -o "$HOME/.local/bin/kubectl" "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x "$HOME/.local/bin/kubectl"
          fi
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          kubectl version --client --output=yaml

      - name: Write kubeconfig from secret
        shell: bash
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}
        run: |
          set -euo pipefail
          if [ -z "${KUBE_CONFIG_B64:-}" ]; then
            echo "::error::Missing repo secret KUBE_CONFIG_B64"; exit 1
          fi
          mkdir -p "$HOME/.kube"
          echo "$KUBE_CONFIG_B64" | base64 -d > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          echo "Context: $(kubectl config current-context || true)"
          kubectl get nodes -o wide || true
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

      - name: Locate manager pods
        shell: bash
        run: |
          set -euo pipefail
          MPOD="$(kubectl -n "$NS" get pod -l app=wazuh-manager,node-type=master -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
          WPOD="$(kubectl -n "$NS" get pod -l app=wazuh-manager,node-type=worker -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
          
          if [ -z "$MPOD" ]; then
            echo "::error::No master manager pod found"
            # Try alternative label selectors
            MPOD="$(kubectl -n "$NS" get pod -l app=wazuh-manager -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
            if [ -z "$MPOD" ]; then
              echo "::error::No wazuh manager pod found with any label selector"
              exit 1
            fi
          fi
          
          echo "MASTER_POD=$MPOD" >> "$GITHUB_ENV"
          [ -n "$WPOD" ] && echo "WORKER_POD=$WPOD" >> "$GITHUB_ENV"
          
          kubectl -n "$NS" wait --for=condition=Ready "pod/$MPOD" --timeout=180s || true
          [ -n "$WPOD" ] && kubectl -n "$NS" wait --for=condition=Ready "pod/$WPOD" --timeout=180s || true

      - name: Force BOTH managers to passwordless + restart
        shell: bash
        run: |
          set -euo pipefail
          . "$GITHUB_ENV" || true
          
          patch_no_pass () {
            local POD="$1"
            [ -z "$POD" ] && return 0
            echo "Setting <use_password>no</use_password> on $POD"
            
            kubectl -n "$NS" exec "$POD" -- bash -lc '
              set -e
              FILE=/var/ossec/etc/ossec.conf
              cp -f "$FILE" "$FILE.bak" || true
              
              # Check if file exists and is readable
              if [ ! -f "$FILE" ] || [ ! -r "$FILE" ]; then
                echo "::error::Cannot read ossec.conf file"
                exit 1
              fi
              
              # Check if auth section exists
              if ! grep -q "<auth>" "$FILE"; then
                echo "::error::No <auth> section found in ossec.conf"
                exit 1
              fi
              
              # Update or add use_password setting
              if grep -q "<use_password>" "$FILE"; then
                sed -i "s#<use_password>.*</use_password>#<use_password>no</use_password>#g" "$FILE"
              else
                # Insert after <auth> line
                sed -i '/<auth>/a \    <use_password>no</use_password>' "$FILE"
              fi
              
              # Verify the change was made
              if ! grep -q "<use_password>no</use_password>" "$FILE"; then
                echo "::error::Failed to set use_password to no"
                exit 1
              fi
              
              echo "Restarting wazuh-manager..."
              supervisorctl restart wazuh-manager
            '
            
            # Check if the command succeeded
            if [ $? -ne 0 ]; then
              echo "::warning::Failed to configure passwordless auth on $POD, continuing anyway"
            fi
          }
          
          patch_no_pass "${MASTER_POD:-}"
          patch_no_pass "${WORKER_POD:-}"

          wait_authd () {
            local POD="$1"
            [ -z "$POD" ] && return 0
            for i in {1..90}; do
              kubectl -n "$NS" logs "$POD" --tail=200 \
                | egrep -qi "ossec-authd|Accepting connections on port 1515" && { echo "$POD authd ready"; return 0; }
              sleep 2
            done
            echo "::warning::$POD authd readiness not confirmed; continuing."
          }
          wait_authd "${MASTER_POD:-}"
          wait_authd "${WORKER_POD:-}"

      # ... rest of the steps remain the same as in your original file
