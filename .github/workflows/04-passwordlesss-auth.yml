name: 04) Enforce Passwordless Auth (Managers)

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: passwordless-${{ github.ref }}
  cancel-in-progress: true

jobs:
  passwordless:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: [self-hosted, linux, ronin, k8s, control-plane]
    timeout-minutes: 30
    env:
      NS: wazuh
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
      RAW_KCFG: ${{ secrets.KUBECONFIG }}
      KCFG_B64: ${{ secrets.KUBECONFIG_B64 }}
      KCFG_B64_ALT: ${{ secrets.KUBE_CONFIG_B64 }}

    steps:
      - uses: actions/checkout@v4

      - name: Write kubeconfig
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${RAW_KCFG:-}" ]; then
            printf '%s' "$RAW_KCFG" > "$KUBECONFIG"
          elif [ -n "${KCFG_B64:-}" ]; then
            printf '%s' "$KCFG_B64" | base64 -d > "$KUBECONFIG"
          elif [ -n "${KCFG_B64_ALT:-}" ]; then
            printf '%s' "$KCFG_B64_ALT" | base64 -d > "$KUBECONFIG"
          else
            echo "::error::No kubeconfig secret found (KUBECONFIG / KUBECONFIG_B64 / KUBE_CONFIG_B64)"; exit 1
          fi
          chmod 600 "$KUBECONFIG"

      - name: Ensure kubectl (no sudo)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          if ! command -v kubectl >/dev/null 2>&1; then
            curl -fsSL -o "$HOME/.local/bin/kubectl" \
              "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x "$HOME/.local/bin/kubectl"
          fi
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Sanity
        shell: bash
        run: |
          set -euxo pipefail
          kubectl version --client
          kubectl get nodes -o wide
          kubectl -n "$NS" get pods -l app=wazuh-manager -o wide

      - name: Force passwordless in running pods (patch + restart)
        shell: bash
        run: |
          set -euxo pipefail
          PODS="$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')"
          [ -z "$PODS" ] && { echo "::error::No wazuh-manager pods found"; exit 1; }

          for P in $PODS; do
            CONS="$(kubectl -n "$NS" get pod "$P" -o jsonpath='{.spec.containers[*].name}')"
            TARGET=""
            for C in $CONS; do
              if kubectl -n "$NS" exec "$P" -c "$C" -- sh -lc 'test -x /var/ossec/bin/wazuh-control'; then TARGET="$C"; break; fi
            done
            [ -z "$TARGET" ] && { echo "::error::$P has no container with wazuh-control"; exit 1; }

            kubectl -n "$NS" exec "$P" -c "$TARGET" -- sh -lc '
              set -eu
              f=/var/ossec/etc/ossec.conf
              cp "$f" "${f}.bak.$(date +%s)" || true
              # Enforce passwordless
              sed -i -E "/<auth>/,/<\/auth>/ s|<use_password>[^<]+</use_password>|<use_password>no</use_password>|" "$f"
              sed -i -E "/<auth>/,/<\/auth>/ s|<port>[0-9]+</port>|<port>1515</port>|" "$f"
              sed -i "/<auth>/,/<\/auth>/{ /<password>.*<\/password>/d; }" "$f"
              rm -f /var/ossec/etc/authd.pass || true
              /var/ossec/bin/wazuh-control restart || /var/ossec/bin/wazuh-control start
              sleep 3
              echo "--- <auth> after patch ---"
              sed -n "/<auth>/,/<\\/auth>/p" "$f"
            '
          done

      - name: Ensure 'wazuh' service (authd:1515 to master) - no heredoc
        shell: bash
        run: |
          set -euxo pipefail
          # Create if missing
          if ! kubectl -n "$NS" get svc wazuh >/dev/null 2>&1; then
            kubectl -n "$NS" create service clusterip wazuh --tcp=1515:1515
          fi
          # Ensure selector targets master
          kubectl -n "$NS" patch svc wazuh --type=merge -p '{"spec":{"selector":{"app":"wazuh-manager","node-type":"master"}}}'
          # Ensure port block as expected
          kubectl -n "$NS" patch svc wazuh --type=merge -p '{"spec":{"ports":[{"name":"authd","port":1515,"protocol":"TCP","targetPort":1515}]}}' || true
          kubectl -n "$NS" get svc wazuh -o wide
          kubectl -n "$NS" get endpoints wazuh -o wide || true

      - name: Verify passwordless and 1515 reachability
        shell: bash
        run: |
          set -euxo pipefail
          FAIL=0
          PODS="$(kubectl -n "$NS" get pods -l app=wazuh-manager -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')"
          for P in $PODS; do
            CONS="$(kubectl -n "$NS" get pod "$P" -o jsonpath='{.spec.containers[*].name}')"
            TARGET=""
            for C in $CONS; do
              if kubectl -n "$NS" exec "$P" -c "$C" -- sh -lc 'test -x /var/ossec/bin/wazuh-control'; then TARGET="$C"; break; fi
            done
            USEPW="$(kubectl -n "$NS" exec "$P" -c "$TARGET" -- sh -lc 'grep -o "<use_password>[^<]*</use_password>" /var/ossec/etc/ossec.conf || true')"
            PORTOK="$(kubectl -n "$NS" exec "$P" -c "$TARGET" -- sh -lc 'grep -q "<port>1515</port>" /var/ossec/etc/ossec.conf && echo ok || echo bad')"
            PASSFILE="$(kubectl -n "$NS" exec "$P" -c "$TARGET" -- sh -lc '[ -f /var/ossec/etc/authd.pass ] && echo present || echo absent')"
            echo "$P => $USEPW | port1515=$PORTOK | authd.pass=$PASSFILE"
            if echo "$USEPW" | grep -q '<use_password>yes</use_password>'; then FAIL=1; fi
            [ "$PORTOK" != "ok" ] && FAIL=1
            [ "$PASSFILE" = "present" ] && FAIL=1
          done

          kubectl -n "$NS" delete pod probe-authd --ignore-not-found=true
          set +e
          kubectl -n "$NS" run probe-authd --image=busybox:1.36 --restart=Never -- sh -lc \
            'set -e; nslookup wazuh.wazuh.svc.cluster.local; for i in $(seq 1 12); do nc -vz -w 2 wazuh.wazuh.svc.cluster.local 1515 && exit 0; echo retry; sleep 2; done; exit 1'
          PROBE=$?
          kubectl -n "$NS" logs pod/probe-authd || true
          kubectl -n "$NS" delete pod probe-authd --ignore-not-found=true
          set -e
          [ $PROBE -ne 0 ] && FAIL=1

          if [ $FAIL -ne 0 ]; then
            echo "::error::Passwordless not fully applied or 1515 not reachable"; exit 1
          fi
          echo "Managers verified passwordless and reachable on 1515."
